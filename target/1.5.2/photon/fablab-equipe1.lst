
c:/src/fablab/fablab-equipe1/target/1.5.2/photon/fablab-equipe1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002c04  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2c20  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000c0  20000000  080a2c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000640  200000c0  200000c0  000300c0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2ce4  080a2ce4  00022ce4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2d0c  080a2d0c  00022d0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c9a6f  00000000  00000000  00022d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011677  00000000  00000000  000ec77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000171a3  00000000  00000000  000fddf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023e8  00000000  00000000  00114f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003a80  00000000  00000000  00117381  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000271c3  00000000  00000000  0011ae01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00027422  00000000  00000000  00141fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000adf50  00000000  00000000  001693e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c72c  00000000  00000000  00217338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fb9f 	bl	80a2770 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fba4 	bl	80a2786 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2c24 	.word	0x080a2c24
 80a004c:	200000c0 	.word	0x200000c0
 80a0050:	200000c0 	.word	0x200000c0
 80a0054:	20000700 	.word	0x20000700
 80a0058:	20000700 	.word	0x20000700

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fb55 	bl	80a170c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2be0 	.word	0x080a2be0
 80a0084:	080a2c14 	.word	0x080a2c14

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b830 	b.w	80a00ec <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f869 	bl	80a0164 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bafb 	b.w	80a1690 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bed7 	b.w	80a0e4c <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f000 bed5 	b.w	80a0e4c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bedb 	b.w	80a0e5c <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f000 bed9 	b.w	80a0e5c <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_Z12MQTTcallbackPcPhj>:
 80a00ba:	4770      	bx	lr

080a00bc <_Z7handlerPKcS0_>:
 80a00bc:	b538      	push	{r3, r4, r5, lr}
 80a00be:	4d08      	ldr	r5, [pc, #32]	; (80a00e0 <_Z7handlerPKcS0_+0x24>)
 80a00c0:	4c08      	ldr	r4, [pc, #32]	; (80a00e4 <_Z7handlerPKcS0_+0x28>)
 80a00c2:	221f      	movs	r2, #31
 80a00c4:	4628      	mov	r0, r5
 80a00c6:	f002 fbc2 	bl	80a284e <strncpy>
 80a00ca:	4907      	ldr	r1, [pc, #28]	; (80a00e8 <_Z7handlerPKcS0_+0x2c>)
 80a00cc:	4620      	mov	r0, r4
 80a00ce:	f002 fb8b 	bl	80a27e8 <strcat>
 80a00d2:	4629      	mov	r1, r5
 80a00d4:	4620      	mov	r0, r4
 80a00d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a00da:	f002 bb85 	b.w	80a27e8 <strcat>
 80a00de:	bf00      	nop
 80a00e0:	200000c5 	.word	0x200000c5
 80a00e4:	200000e5 	.word	0x200000e5
 80a00e8:	2000003c 	.word	0x2000003c

080a00ec <setup>:
 80a00ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a00ee:	2400      	movs	r4, #0
 80a00f0:	4622      	mov	r2, r4
 80a00f2:	9401      	str	r4, [sp, #4]
 80a00f4:	9400      	str	r4, [sp, #0]
 80a00f6:	2301      	movs	r3, #1
 80a00f8:	4915      	ldr	r1, [pc, #84]	; (80a0150 <setup+0x64>)
 80a00fa:	4816      	ldr	r0, [pc, #88]	; (80a0154 <setup+0x68>)
 80a00fc:	f000 fe96 	bl	80a0e2c <spark_subscribe>
 80a0100:	4b15      	ldr	r3, [pc, #84]	; (80a0158 <setup+0x6c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0102:	4622      	mov	r2, r4
 80a0104:	781b      	ldrb	r3, [r3, #0]
 80a0106:	4913      	ldr	r1, [pc, #76]	; (80a0154 <setup+0x68>)
 80a0108:	f88d 3000 	strb.w	r3, [sp]
 80a010c:	a802      	add	r0, sp, #8
 80a010e:	233c      	movs	r3, #60	; 0x3c
 80a0110:	f001 fc6a 	bl	80a19e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0114:	9c03      	ldr	r4, [sp, #12]
 80a0116:	b17c      	cbz	r4, 80a0138 <setup+0x4c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0118:	6863      	ldr	r3, [r4, #4]
 80a011a:	3b01      	subs	r3, #1
 80a011c:	6063      	str	r3, [r4, #4]
 80a011e:	b95b      	cbnz	r3, 80a0138 <setup+0x4c>
        {
          _M_dispose();
 80a0120:	6823      	ldr	r3, [r4, #0]
 80a0122:	4620      	mov	r0, r4
 80a0124:	689b      	ldr	r3, [r3, #8]
 80a0126:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0128:	68a3      	ldr	r3, [r4, #8]
 80a012a:	3b01      	subs	r3, #1
 80a012c:	60a3      	str	r3, [r4, #8]
 80a012e:	b91b      	cbnz	r3, 80a0138 <setup+0x4c>
            _M_destroy();
 80a0130:	6823      	ldr	r3, [r4, #0]
 80a0132:	4620      	mov	r0, r4
 80a0134:	68db      	ldr	r3, [r3, #12]
 80a0136:	4798      	blx	r3
 80a0138:	4b08      	ldr	r3, [pc, #32]	; (80a015c <setup+0x70>)
 80a013a:	2101      	movs	r1, #1
 80a013c:	8818      	ldrh	r0, [r3, #0]
 80a013e:	f002 f907 	bl	80a2350 <pinMode>
 80a0142:	4b07      	ldr	r3, [pc, #28]	; (80a0160 <setup+0x74>)
 80a0144:	2103      	movs	r1, #3
 80a0146:	8818      	ldrh	r0, [r3, #0]
 80a0148:	f002 f902 	bl	80a2350 <pinMode>
 80a014c:	b004      	add	sp, #16
 80a014e:	bd10      	pop	{r4, pc}
 80a0150:	080a00bd 	.word	0x080a00bd
 80a0154:	080a2888 	.word	0x080a2888
 80a0158:	200000c4 	.word	0x200000c4
 80a015c:	20000038 	.word	0x20000038
 80a0160:	20000054 	.word	0x20000054

080a0164 <loop>:
 80a0164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0168:	4824      	ldr	r0, [pc, #144]	; (80a01fc <loop+0x98>)
 80a016a:	f000 f9a8 	bl	80a04be <_ZN4MQTT11isConnectedEv>
 80a016e:	4c24      	ldr	r4, [pc, #144]	; (80a0200 <loop+0x9c>)
 80a0170:	b970      	cbnz	r0, 80a0190 <loop+0x2c>
 80a0172:	4924      	ldr	r1, [pc, #144]	; (80a0204 <loop+0xa0>)
 80a0174:	4821      	ldr	r0, [pc, #132]	; (80a01fc <loop+0x98>)
 80a0176:	f000 fa87 	bl	80a0688 <_ZN4MQTT7connectEPKc>
 80a017a:	b948      	cbnz	r0, 80a0190 <loop+0x2c>
 80a017c:	8820      	ldrh	r0, [r4, #0]
 80a017e:	2101      	movs	r1, #1
 80a0180:	f002 f8f7 	bl	80a2372 <digitalWrite>
 80a0184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a0188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a018c:	f001 ba1e 	b.w	80a15cc <delay>
 80a0190:	2100      	movs	r1, #0
 80a0192:	8820      	ldrh	r0, [r4, #0]
 80a0194:	f002 f8ed 	bl	80a2372 <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0198:	f000 fc9a 	bl	80a0ad0 <HAL_Timer_Get_Milli_Seconds>
 80a019c:	4b1a      	ldr	r3, [pc, #104]	; (80a0208 <loop+0xa4>)
 80a019e:	4607      	mov	r7, r0
 80a01a0:	8818      	ldrh	r0, [r3, #0]
 80a01a2:	f002 f8ff 	bl	80a23a4 <digitalRead>
 80a01a6:	4b19      	ldr	r3, [pc, #100]	; (80a020c <loop+0xa8>)
 80a01a8:	2801      	cmp	r0, #1
 80a01aa:	4e15      	ldr	r6, [pc, #84]	; (80a0200 <loop+0x9c>)
 80a01ac:	4601      	mov	r1, r0
 80a01ae:	6018      	str	r0, [r3, #0]
 80a01b0:	461c      	mov	r4, r3
 80a01b2:	4d17      	ldr	r5, [pc, #92]	; (80a0210 <loop+0xac>)
 80a01b4:	d11b      	bne.n	80a01ee <loop+0x8a>
 80a01b6:	682b      	ldr	r3, [r5, #0]
 80a01b8:	2b01      	cmp	r3, #1
 80a01ba:	d018      	beq.n	80a01ee <loop+0x8a>
 80a01bc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80a021c <loop+0xb8>
 80a01c0:	f8d8 3000 	ldr.w	r3, [r8]
 80a01c4:	1afb      	subs	r3, r7, r3
 80a01c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a01ca:	d310      	bcc.n	80a01ee <loop+0x8a>
 80a01cc:	8830      	ldrh	r0, [r6, #0]
 80a01ce:	f002 f8d0 	bl	80a2372 <digitalWrite>
 80a01d2:	4910      	ldr	r1, [pc, #64]	; (80a0214 <loop+0xb0>)
 80a01d4:	4a10      	ldr	r2, [pc, #64]	; (80a0218 <loop+0xb4>)
 80a01d6:	4809      	ldr	r0, [pc, #36]	; (80a01fc <loop+0x98>)
 80a01d8:	f000 fad5 	bl	80a0786 <_ZN4MQTT7publishEPKcS1_>
 80a01dc:	2064      	movs	r0, #100	; 0x64
 80a01de:	f001 f9f5 	bl	80a15cc <delay>
 80a01e2:	2100      	movs	r1, #0
 80a01e4:	8830      	ldrh	r0, [r6, #0]
 80a01e6:	f8c8 7000 	str.w	r7, [r8]
 80a01ea:	f002 f8c2 	bl	80a2372 <digitalWrite>
 80a01ee:	6823      	ldr	r3, [r4, #0]
 80a01f0:	4802      	ldr	r0, [pc, #8]	; (80a01fc <loop+0x98>)
 80a01f2:	602b      	str	r3, [r5, #0]
 80a01f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a01f8:	f000 bb0c 	b.w	80a0814 <_ZN4MQTT4loopEv>
 80a01fc:	20000128 	.word	0x20000128
 80a0200:	20000038 	.word	0x20000038
 80a0204:	080a289d 	.word	0x080a289d
 80a0208:	20000054 	.word	0x20000054
 80a020c:	20000050 	.word	0x20000050
 80a0210:	20000034 	.word	0x20000034
 80a0214:	200000e5 	.word	0x200000e5
 80a0218:	20000000 	.word	0x20000000
 80a021c:	20000124 	.word	0x20000124

080a0220 <_GLOBAL__sub_I_btnPin>:
 80a0220:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0222:	4b0a      	ldr	r3, [pc, #40]	; (80a024c <_GLOBAL__sub_I_btnPin+0x2c>)
 80a0224:	4c0a      	ldr	r4, [pc, #40]	; (80a0250 <_GLOBAL__sub_I_btnPin+0x30>)
 80a0226:	2200      	movs	r2, #0
 80a0228:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a022a:	f000 fc11 	bl	80a0a50 <HAL_Pin_Map>
 80a022e:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0232:	4908      	ldr	r1, [pc, #32]	; (80a0254 <_GLOBAL__sub_I_btnPin+0x34>)
 80a0234:	4620      	mov	r0, r4
 80a0236:	4b08      	ldr	r3, [pc, #32]	; (80a0258 <_GLOBAL__sub_I_btnPin+0x38>)
 80a0238:	f000 f85a 	bl	80a02f0 <_ZN4MQTTC1EPctPFvS0_PhjE>
 80a023c:	4620      	mov	r0, r4
 80a023e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0242:	4a06      	ldr	r2, [pc, #24]	; (80a025c <_GLOBAL__sub_I_btnPin+0x3c>)
 80a0244:	4906      	ldr	r1, [pc, #24]	; (80a0260 <_GLOBAL__sub_I_btnPin+0x40>)
 80a0246:	f002 b919 	b.w	80a247c <__aeabi_atexit>
 80a024a:	bf00      	nop
 80a024c:	200000c4 	.word	0x200000c4
 80a0250:	20000128 	.word	0x20000128
 80a0254:	080a28a6 	.word	0x080a28a6
 80a0258:	080a00bb 	.word	0x080a00bb
 80a025c:	200000c0 	.word	0x200000c0
 80a0260:	080a0a21 	.word	0x080a0a21

080a0264 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0264:	b538      	push	{r3, r4, r5, lr}
 80a0266:	4b0b      	ldr	r3, [pc, #44]	; (80a0294 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0268:	6984      	ldr	r4, [r0, #24]
 80a026a:	4605      	mov	r5, r0
 80a026c:	6003      	str	r3, [r0, #0]
 80a026e:	b17c      	cbz	r4, 80a0290 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0270:	6863      	ldr	r3, [r4, #4]
 80a0272:	3b01      	subs	r3, #1
 80a0274:	6063      	str	r3, [r4, #4]
 80a0276:	b95b      	cbnz	r3, 80a0290 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0278:	6823      	ldr	r3, [r4, #0]
 80a027a:	4620      	mov	r0, r4
 80a027c:	689b      	ldr	r3, [r3, #8]
 80a027e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0280:	68a3      	ldr	r3, [r4, #8]
 80a0282:	3b01      	subs	r3, #1
 80a0284:	60a3      	str	r3, [r4, #8]
 80a0286:	b91b      	cbnz	r3, 80a0290 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0288:	6823      	ldr	r3, [r4, #0]
 80a028a:	4620      	mov	r0, r4
 80a028c:	68db      	ldr	r3, [r3, #12]
 80a028e:	4798      	blx	r3
 80a0290:	4628      	mov	r0, r5
 80a0292:	bd38      	pop	{r3, r4, r5, pc}
 80a0294:	080a28ec 	.word	0x080a28ec

080a0298 <_ZN9TCPClientD0Ev>:
 80a0298:	b510      	push	{r4, lr}
 80a029a:	4604      	mov	r4, r0
 80a029c:	f7ff ffe2 	bl	80a0264 <_ZN9TCPClientD1Ev>
 80a02a0:	4620      	mov	r0, r4
 80a02a2:	211c      	movs	r1, #28
 80a02a4:	f002 f8f8 	bl	80a2498 <_ZdlPvj>
 80a02a8:	4620      	mov	r0, r4
 80a02aa:	bd10      	pop	{r4, pc}

080a02ac <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a02ac:	b538      	push	{r3, r4, r5, lr}
 80a02ae:	461d      	mov	r5, r3
    this->callback = callback;
 80a02b0:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a02b2:	4604      	mov	r4, r0
    this->callback = callback;
 80a02b4:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a02b6:	2300      	movs	r3, #0
 80a02b8:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a02ba:	b102      	cbz	r2, 80a02be <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a02bc:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a02be:	b119      	cbz	r1, 80a02c8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a02c0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a02c4:	f001 f8f4 	bl	80a14b0 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a02c8:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a02ca:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a02cc:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a02ce:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a02d0:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a02d4:	2bff      	cmp	r3, #255	; 0xff
 80a02d6:	bfb8      	it	lt
 80a02d8:	23ff      	movlt	r3, #255	; 0xff
 80a02da:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a02de:	b108      	cbz	r0, 80a02e4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a02e0:	f7ff fee1 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a02e4:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a02e8:	f7ff fed9 	bl	80a009e <_Znaj>
 80a02ec:	61e0      	str	r0, [r4, #28]
 80a02ee:	bd38      	pop	{r3, r4, r5, pc}

080a02f0 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a02f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a02f4:	4604      	mov	r4, r0
 80a02f6:	4617      	mov	r7, r2
 80a02f8:	4698      	mov	r8, r3
 80a02fa:	460e      	mov	r6, r1
 80a02fc:	2500      	movs	r5, #0
 80a02fe:	f001 f825 	bl	80a134c <_ZN9TCPClientC1Ev>
 80a0302:	61e5      	str	r5, [r4, #28]
 80a0304:	490a      	ldr	r1, [pc, #40]	; (80a0330 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
 80a0306:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a030a:	f001 f8be 	bl	80a148a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a030e:	23ff      	movs	r3, #255	; 0xff
 80a0310:	9302      	str	r3, [sp, #8]
 80a0312:	230f      	movs	r3, #15
 80a0314:	9300      	str	r3, [sp, #0]
 80a0316:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0318:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a031a:	f8cd 8004 	str.w	r8, [sp, #4]
 80a031e:	463b      	mov	r3, r7
 80a0320:	462a      	mov	r2, r5
 80a0322:	4631      	mov	r1, r6
 80a0324:	f7ff ffc2 	bl	80a02ac <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a0328:	4620      	mov	r0, r4
 80a032a:	b004      	add	sp, #16
 80a032c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0330:	080a29f5 	.word	0x080a29f5

080a0334 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0334:	b510      	push	{r4, lr}
 80a0336:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0338:	4620      	mov	r0, r4
 80a033a:	f000 fe9b 	bl	80a1074 <_ZN9TCPClient9availableEv>
 80a033e:	2800      	cmp	r0, #0
 80a0340:	d0fa      	beq.n	80a0338 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0342:	4620      	mov	r0, r4
 80a0344:	f000 fe4b 	bl	80a0fde <_ZN9TCPClient4readEv>
}
 80a0348:	b2c0      	uxtb	r0, r0
 80a034a:	bd10      	pop	{r4, pc}

080a034c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0350:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0352:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0354:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0356:	f7ff ffed 	bl	80a0334 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a035a:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a035e:	4646      	mov	r6, r8
 80a0360:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0362:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a0364:	2700      	movs	r7, #0
 80a0366:	f893 9000 	ldrb.w	r9, [r3]
 80a036a:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a036e:	4628      	mov	r0, r5
 80a0370:	f7ff ffe0 	bl	80a0334 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0374:	69eb      	ldr	r3, [r5, #28]
 80a0376:	1c74      	adds	r4, r6, #1
 80a0378:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a037a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a037e:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a0382:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0384:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0386:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0388:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a038c:	d501      	bpl.n	80a0392 <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a038e:	4626      	mov	r6, r4
 80a0390:	e7ed      	b.n	80a036e <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0392:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0394:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0398:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a039c:	d113      	bne.n	80a03c6 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a039e:	4628      	mov	r0, r5
 80a03a0:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a03a4:	f7ff ffc6 	bl	80a0334 <_ZN4MQTT8readByteEv>
 80a03a8:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a03ac:	4628      	mov	r0, r5
 80a03ae:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a03b2:	f7ff ffbf 	bl	80a0334 <_ZN4MQTT8readByteEv>
 80a03b6:	1cf4      	adds	r4, r6, #3
 80a03b8:	3602      	adds	r6, #2
 80a03ba:	b2b6      	uxth	r6, r6
 80a03bc:	b2a4      	uxth	r4, r4
 80a03be:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a03c2:	2302      	movs	r3, #2
 80a03c4:	e000      	b.n	80a03c8 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a03c6:	2300      	movs	r3, #0
 80a03c8:	1b1b      	subs	r3, r3, r4
 80a03ca:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a03cc:	19a3      	adds	r3, r4, r6
 80a03ce:	b29b      	uxth	r3, r3
 80a03d0:	429f      	cmp	r7, r3
 80a03d2:	d90b      	bls.n	80a03ec <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a03d4:	4628      	mov	r0, r5
 80a03d6:	f7ff ffad 	bl	80a0334 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a03da:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a03de:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a03e0:	bf84      	itt	hi
 80a03e2:	69eb      	ldrhi	r3, [r5, #28]
 80a03e4:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a03e6:	3401      	adds	r4, #1
 80a03e8:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a03ea:	e7ef      	b.n	80a03cc <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a03ec:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a03f0:	42a0      	cmp	r0, r4
 80a03f2:	bf2c      	ite	cs
 80a03f4:	4620      	movcs	r0, r4
 80a03f6:	2000      	movcc	r0, #0
 80a03f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a03fc <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a03fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a03fe:	4607      	mov	r7, r0
 80a0400:	468e      	mov	lr, r1
 80a0402:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0404:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a0406:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a0408:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a040c:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a040e:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0410:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a0412:	bf18      	it	ne
 80a0414:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a0418:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a041a:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a041e:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a0420:	2d00      	cmp	r5, #0
 80a0422:	d1f1      	bne.n	80a0408 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a0424:	f1c4 0304 	rsb	r3, r4, #4
 80a0428:	18d1      	adds	r1, r2, r3
 80a042a:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a042e:	42a5      	cmp	r5, r4
 80a0430:	da06      	bge.n	80a0440 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a0432:	a801      	add	r0, sp, #4
 80a0434:	1b2b      	subs	r3, r5, r4
 80a0436:	5c28      	ldrb	r0, [r5, r0]
 80a0438:	4413      	add	r3, r2
 80a043a:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a043c:	3501      	adds	r5, #1
 80a043e:	e7f6      	b.n	80a042e <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0440:	1c72      	adds	r2, r6, #1
 80a0442:	4422      	add	r2, r4
 80a0444:	4638      	mov	r0, r7
 80a0446:	f000 fd72 	bl	80a0f2e <_ZN9TCPClient5writeEPKhj>
 80a044a:	4605      	mov	r5, r0
 80a044c:	f000 fb40 	bl	80a0ad0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0450:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a0452:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0454:	4434      	add	r4, r6
 80a0456:	b2a8      	uxth	r0, r5
}
 80a0458:	1a23      	subs	r3, r4, r0
 80a045a:	4258      	negs	r0, r3
 80a045c:	4158      	adcs	r0, r3
 80a045e:	b003      	add	sp, #12
 80a0460:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0462 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a0462:	b510      	push	{r4, lr}
 80a0464:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a0466:	69c3      	ldr	r3, [r0, #28]
 80a0468:	22e0      	movs	r2, #224	; 0xe0
 80a046a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a046c:	69c3      	ldr	r3, [r0, #28]
 80a046e:	2200      	movs	r2, #0
 80a0470:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a0472:	69c1      	ldr	r1, [r0, #28]
 80a0474:	2202      	movs	r2, #2
 80a0476:	f000 fd5a 	bl	80a0f2e <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a047a:	4620      	mov	r0, r4
 80a047c:	f000 fe36 	bl	80a10ec <_ZN9TCPClient4stopEv>
 80a0480:	f000 fb26 	bl	80a0ad0 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0484:	6260      	str	r0, [r4, #36]	; 0x24
 80a0486:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0488:	bd10      	pop	{r4, pc}

080a048a <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a048a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a048c:	460d      	mov	r5, r1
 80a048e:	3302      	adds	r3, #2
 80a0490:	b29b      	uxth	r3, r3
 80a0492:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a0494:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a0498:	b2a4      	uxth	r4, r4
 80a049a:	b13e      	cbz	r6, 80a04ac <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a049c:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a04a0:	429f      	cmp	r7, r3
 80a04a2:	d903      	bls.n	80a04ac <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a04a4:	1c5c      	adds	r4, r3, #1
 80a04a6:	54d6      	strb	r6, [r2, r3]
 80a04a8:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a04aa:	e7f2      	b.n	80a0492 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a04ac:	1b19      	subs	r1, r3, r4
 80a04ae:	440a      	add	r2, r1
 80a04b0:	1221      	asrs	r1, r4, #8
 80a04b2:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a04b6:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a04ba:	4618      	mov	r0, r3
 80a04bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a04be <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a04be:	b538      	push	{r3, r4, r5, lr}
 80a04c0:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a04c2:	f000 fed4 	bl	80a126e <_ZN9TCPClient9connectedEv>
 80a04c6:	2800      	cmp	r0, #0
 80a04c8:	bf14      	ite	ne
 80a04ca:	2401      	movne	r4, #1
 80a04cc:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a04ce:	d102      	bne.n	80a04d6 <_ZN4MQTT11isConnectedEv+0x18>
 80a04d0:	4628      	mov	r0, r5
 80a04d2:	f000 fe0b 	bl	80a10ec <_ZN9TCPClient4stopEv>
    return rc;
}
 80a04d6:	4620      	mov	r0, r4
 80a04d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a04dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a04dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a04e0:	b087      	sub	sp, #28
 80a04e2:	4604      	mov	r4, r0
 80a04e4:	4689      	mov	r9, r1
 80a04e6:	4617      	mov	r7, r2
 80a04e8:	461e      	mov	r6, r3
 80a04ea:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a04ee:	f7ff ffe6 	bl	80a04be <_ZN4MQTT11isConnectedEv>
 80a04f2:	4605      	mov	r5, r0
 80a04f4:	2800      	cmp	r0, #0
 80a04f6:	f040 80bd 	bne.w	80a0674 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a04fa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a04fc:	b939      	cbnz	r1, 80a050e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a04fe:	4603      	mov	r3, r0
 80a0500:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0504:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0506:	4620      	mov	r0, r4
 80a0508:	f000 ff42 	bl	80a1390 <_ZN9TCPClient7connectEPKctm>
 80a050c:	e009      	b.n	80a0522 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a050e:	4668      	mov	r0, sp
 80a0510:	f001 fc5c 	bl	80a1dcc <_ZN9IPAddressC1EPKh>
 80a0514:	462b      	mov	r3, r5
 80a0516:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a051a:	4669      	mov	r1, sp
 80a051c:	4620      	mov	r0, r4
 80a051e:	f000 fdff 	bl	80a1120 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a0522:	2800      	cmp	r0, #0
 80a0524:	f000 80a2 	beq.w	80a066c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a0528:	2301      	movs	r3, #1
 80a052a:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a052c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a0530:	2b04      	cmp	r3, #4
 80a0532:	d115      	bne.n	80a0560 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0534:	4b52      	ldr	r3, [pc, #328]	; (80a0680 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a0536:	6818      	ldr	r0, [r3, #0]
 80a0538:	889a      	ldrh	r2, [r3, #4]
 80a053a:	9000      	str	r0, [sp, #0]
 80a053c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a0540:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0542:	69e2      	ldr	r2, [r4, #28]
 80a0544:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0546:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a054a:	f8c2 0005 	str.w	r0, [r2, #5]
 80a054e:	1d53      	adds	r3, r2, #5
 80a0550:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a0554:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0558:	8099      	strh	r1, [r3, #4]
 80a055a:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a055c:	230c      	movs	r3, #12
 80a055e:	e012      	b.n	80a0586 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0560:	466a      	mov	r2, sp
 80a0562:	4b48      	ldr	r3, [pc, #288]	; (80a0684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0564:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0568:	6818      	ldr	r0, [r3, #0]
 80a056a:	6859      	ldr	r1, [r3, #4]
 80a056c:	7a1b      	ldrb	r3, [r3, #8]
 80a056e:	c203      	stmia	r2!, {r0, r1}
 80a0570:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0572:	466b      	mov	r3, sp
 80a0574:	cb03      	ldmia	r3!, {r0, r1}
 80a0576:	f8cc 0005 	str.w	r0, [ip, #5]
 80a057a:	f8cc 1009 	str.w	r1, [ip, #9]
 80a057e:	7813      	ldrb	r3, [r2, #0]
 80a0580:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0584:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a0586:	f1b8 0f00 	cmp.w	r8, #0
 80a058a:	d00a      	beq.n	80a05a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a058c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a0590:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a0594:	0152      	lsls	r2, r2, #5
 80a0596:	f042 0206 	orr.w	r2, r2, #6
 80a059a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a059e:	b2d2      	uxtb	r2, r2
 80a05a0:	e000      	b.n	80a05a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a05a2:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a05a4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a05a8:	b909      	cbnz	r1, 80a05ae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a05aa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a05ae:	b12f      	cbz	r7, 80a05bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a05b0:	b916      	cbnz	r6, 80a05b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a05b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a05b6:	e001      	b.n	80a05bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a05b8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a05bc:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a05be:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a05c0:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a05c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a05c4:	69e1      	ldr	r1, [r4, #28]
 80a05c6:	1212      	asrs	r2, r2, #8
 80a05c8:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a05ca:	69e1      	ldr	r1, [r4, #28]
 80a05cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a05ce:	1c9a      	adds	r2, r3, #2
 80a05d0:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a05d2:	3303      	adds	r3, #3
 80a05d4:	69e2      	ldr	r2, [r4, #28]
 80a05d6:	4649      	mov	r1, r9
 80a05d8:	4620      	mov	r0, r4
 80a05da:	f7ff ff56 	bl	80a048a <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a05de:	f1b8 0f00 	cmp.w	r8, #0
 80a05e2:	d00b      	beq.n	80a05fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a05e4:	4603      	mov	r3, r0
 80a05e6:	69e2      	ldr	r2, [r4, #28]
 80a05e8:	4641      	mov	r1, r8
 80a05ea:	4620      	mov	r0, r4
 80a05ec:	f7ff ff4d 	bl	80a048a <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a05f0:	69e2      	ldr	r2, [r4, #28]
 80a05f2:	4603      	mov	r3, r0
 80a05f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a05f6:	4620      	mov	r0, r4
 80a05f8:	f7ff ff47 	bl	80a048a <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a05fc:	b167      	cbz	r7, 80a0618 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a05fe:	4603      	mov	r3, r0
 80a0600:	69e2      	ldr	r2, [r4, #28]
 80a0602:	4639      	mov	r1, r7
 80a0604:	4620      	mov	r0, r4
 80a0606:	f7ff ff40 	bl	80a048a <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a060a:	b12e      	cbz	r6, 80a0618 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a060c:	4603      	mov	r3, r0
 80a060e:	69e2      	ldr	r2, [r4, #28]
 80a0610:	4631      	mov	r1, r6
 80a0612:	4620      	mov	r0, r4
 80a0614:	f7ff ff39 	bl	80a048a <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a0618:	1f43      	subs	r3, r0, #5
 80a061a:	b29b      	uxth	r3, r3
 80a061c:	69e2      	ldr	r2, [r4, #28]
 80a061e:	2110      	movs	r1, #16
 80a0620:	4620      	mov	r0, r4
 80a0622:	f7ff feeb 	bl	80a03fc <_ZN4MQTT5writeEhPht>
 80a0626:	f000 fa53 	bl	80a0ad0 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a062a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a062e:	6260      	str	r0, [r4, #36]	; 0x24
 80a0630:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a0632:	4620      	mov	r0, r4
 80a0634:	f000 fd1e 	bl	80a1074 <_ZN9TCPClient9availableEv>
 80a0638:	b940      	cbnz	r0, 80a064c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a063a:	f000 fa49 	bl	80a0ad0 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a063e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0640:	1ac0      	subs	r0, r0, r3
 80a0642:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0644:	4373      	muls	r3, r6
 80a0646:	4298      	cmp	r0, r3
 80a0648:	d9f3      	bls.n	80a0632 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a064a:	e00f      	b.n	80a066c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a064c:	4669      	mov	r1, sp
 80a064e:	4620      	mov	r0, r4
 80a0650:	f7ff fe7c 	bl	80a034c <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a0654:	2804      	cmp	r0, #4
 80a0656:	d109      	bne.n	80a066c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a0658:	69e3      	ldr	r3, [r4, #28]
 80a065a:	78de      	ldrb	r6, [r3, #3]
 80a065c:	b936      	cbnz	r6, 80a066c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a065e:	f000 fa37 	bl	80a0ad0 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a0662:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a0664:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0666:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a066a:	e004      	b.n	80a0676 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a066c:	4620      	mov	r0, r4
 80a066e:	f000 fd3d 	bl	80a10ec <_ZN9TCPClient4stopEv>
 80a0672:	e000      	b.n	80a0676 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a0674:	2500      	movs	r5, #0
}
 80a0676:	4628      	mov	r0, r5
 80a0678:	b007      	add	sp, #28
 80a067a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a067e:	bf00      	nop
 80a0680:	080a28b5 	.word	0x080a28b5
 80a0684:	080a28bc 	.word	0x080a28bc

080a0688 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a0688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a068a:	2304      	movs	r3, #4
 80a068c:	9305      	str	r3, [sp, #20]
 80a068e:	2301      	movs	r3, #1
 80a0690:	9304      	str	r3, [sp, #16]
 80a0692:	2300      	movs	r3, #0
 80a0694:	9303      	str	r3, [sp, #12]
 80a0696:	9302      	str	r3, [sp, #8]
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	9300      	str	r3, [sp, #0]
 80a069c:	461a      	mov	r2, r3
 80a069e:	f7ff ff1d 	bl	80a04dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a06a2:	b007      	add	sp, #28
 80a06a4:	f85d fb04 	ldr.w	pc, [sp], #4

080a06a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a06a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a06ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a06ae:	4604      	mov	r4, r0
 80a06b0:	468b      	mov	fp, r1
 80a06b2:	4691      	mov	r9, r2
 80a06b4:	469a      	mov	sl, r3
 80a06b6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a06ba:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a06be:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a06c2:	f7ff fefc 	bl	80a04be <_ZN4MQTT11isConnectedEv>
 80a06c6:	2800      	cmp	r0, #0
 80a06c8:	d04b      	beq.n	80a0762 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a06ca:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a06ce:	2100      	movs	r1, #0
 80a06d0:	69e0      	ldr	r0, [r4, #28]
 80a06d2:	f002 f858 	bl	80a2786 <memset>

        length = writeString(topic, buffer, length);
 80a06d6:	2305      	movs	r3, #5
 80a06d8:	69e2      	ldr	r2, [r4, #28]
 80a06da:	4659      	mov	r1, fp
 80a06dc:	4620      	mov	r0, r4
 80a06de:	f7ff fed4 	bl	80a048a <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a06e2:	1e6b      	subs	r3, r5, #1
 80a06e4:	2b01      	cmp	r3, #1
 80a06e6:	d812      	bhi.n	80a070e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a06e8:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a06ea:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a06ec:	3301      	adds	r3, #1
 80a06ee:	b29b      	uxth	r3, r3
 80a06f0:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a06f2:	121b      	asrs	r3, r3, #8
 80a06f4:	5413      	strb	r3, [r2, r0]
 80a06f6:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a06f8:	69e3      	ldr	r3, [r4, #28]
 80a06fa:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a06fc:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a06fe:	3002      	adds	r0, #2
 80a0700:	b280      	uxth	r0, r0
 80a0702:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a0704:	b11e      	cbz	r6, 80a070e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a0706:	8c23      	ldrh	r3, [r4, #32]
 80a0708:	1c5a      	adds	r2, r3, #1
 80a070a:	8422      	strh	r2, [r4, #32]
 80a070c:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a070e:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0710:	b291      	uxth	r1, r2
 80a0712:	1883      	adds	r3, r0, r2
 80a0714:	458a      	cmp	sl, r1
 80a0716:	b29b      	uxth	r3, r3
 80a0718:	d909      	bls.n	80a072e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a071a:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a071e:	3201      	adds	r2, #1
 80a0720:	429e      	cmp	r6, r3
 80a0722:	d904      	bls.n	80a072e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a0724:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a0728:	69e1      	ldr	r1, [r4, #28]
 80a072a:	54ce      	strb	r6, [r1, r3]
 80a072c:	e7f0      	b.n	80a0710 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a072e:	f1b8 0f00 	cmp.w	r8, #0
 80a0732:	bf0c      	ite	eq
 80a0734:	2130      	moveq	r1, #48	; 0x30
 80a0736:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a0738:	b10f      	cbz	r7, 80a073e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a073a:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a073e:	2d02      	cmp	r5, #2
 80a0740:	d102      	bne.n	80a0748 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a0742:	f041 0104 	orr.w	r1, r1, #4
 80a0746:	e003      	b.n	80a0750 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a0748:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a074a:	bf08      	it	eq
 80a074c:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a0750:	4620      	mov	r0, r4
 80a0752:	3b05      	subs	r3, #5
 80a0754:	69e2      	ldr	r2, [r4, #28]
 80a0756:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a0758:	b001      	add	sp, #4
 80a075a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a075e:	f7ff be4d 	b.w	80a03fc <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a0762:	b001      	add	sp, #4
 80a0764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0768 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a0768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a076a:	9c08      	ldr	r4, [sp, #32]
 80a076c:	9403      	str	r4, [sp, #12]
 80a076e:	2400      	movs	r4, #0
 80a0770:	9402      	str	r4, [sp, #8]
 80a0772:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a0776:	9401      	str	r4, [sp, #4]
 80a0778:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a077c:	9400      	str	r4, [sp, #0]
 80a077e:	f7ff ff93 	bl	80a06a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a0782:	b004      	add	sp, #16
 80a0784:	bd10      	pop	{r4, pc}

080a0786 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a0786:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0788:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a078a:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a078c:	460e      	mov	r6, r1
 80a078e:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0790:	f002 f855 	bl	80a283e <strlen>
 80a0794:	2300      	movs	r3, #0
 80a0796:	9302      	str	r3, [sp, #8]
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	9300      	str	r3, [sp, #0]
 80a079c:	4622      	mov	r2, r4
 80a079e:	4603      	mov	r3, r0
 80a07a0:	4631      	mov	r1, r6
 80a07a2:	4628      	mov	r0, r5
 80a07a4:	f7ff ffe0 	bl	80a0768 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a07a8:	b004      	add	sp, #16
 80a07aa:	bd70      	pop	{r4, r5, r6, pc}

080a07ac <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a07ac:	b538      	push	{r3, r4, r5, lr}
 80a07ae:	4604      	mov	r4, r0
 80a07b0:	460d      	mov	r5, r1
    if (isConnected()) {
 80a07b2:	f7ff fe84 	bl	80a04be <_ZN4MQTT11isConnectedEv>
 80a07b6:	b190      	cbz	r0, 80a07de <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a07b8:	69e3      	ldr	r3, [r4, #28]
 80a07ba:	2262      	movs	r2, #98	; 0x62
 80a07bc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a07be:	69e3      	ldr	r3, [r4, #28]
 80a07c0:	2202      	movs	r2, #2
 80a07c2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a07c4:	69e3      	ldr	r3, [r4, #28]
 80a07c6:	122a      	asrs	r2, r5, #8
 80a07c8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a07ca:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a07cc:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a07ce:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a07d0:	69e1      	ldr	r1, [r4, #28]
 80a07d2:	4620      	mov	r0, r4
 80a07d4:	f000 fbab 	bl	80a0f2e <_ZN9TCPClient5writeEPKhj>
 80a07d8:	3000      	adds	r0, #0
 80a07da:	bf18      	it	ne
 80a07dc:	2001      	movne	r0, #1
    }
    return false;
}
 80a07de:	bd38      	pop	{r3, r4, r5, pc}

080a07e0 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a07e0:	b538      	push	{r3, r4, r5, lr}
 80a07e2:	4604      	mov	r4, r0
 80a07e4:	460d      	mov	r5, r1
    if (isConnected()) {
 80a07e6:	f7ff fe6a 	bl	80a04be <_ZN4MQTT11isConnectedEv>
 80a07ea:	b190      	cbz	r0, 80a0812 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a07ec:	69e3      	ldr	r3, [r4, #28]
 80a07ee:	2272      	movs	r2, #114	; 0x72
 80a07f0:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a07f2:	69e3      	ldr	r3, [r4, #28]
 80a07f4:	2202      	movs	r2, #2
 80a07f6:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a07f8:	69e3      	ldr	r3, [r4, #28]
 80a07fa:	122a      	asrs	r2, r5, #8
 80a07fc:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a07fe:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0800:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a0802:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a0804:	69e1      	ldr	r1, [r4, #28]
 80a0806:	4620      	mov	r0, r4
 80a0808:	f000 fb91 	bl	80a0f2e <_ZN9TCPClient5writeEPKhj>
 80a080c:	3000      	adds	r0, #0
 80a080e:	bf18      	it	ne
 80a0810:	2001      	movne	r0, #1
    }
    return false;
}
 80a0812:	bd38      	pop	{r3, r4, r5, pc}

080a0814 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a0814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0818:	b083      	sub	sp, #12
 80a081a:	af00      	add	r7, sp, #0
 80a081c:	4604      	mov	r4, r0
    if (isConnected()) {
 80a081e:	f7ff fe4e 	bl	80a04be <_ZN4MQTT11isConnectedEv>
 80a0822:	4681      	mov	r9, r0
 80a0824:	2800      	cmp	r0, #0
 80a0826:	f000 80f6 	beq.w	80a0a16 <_ZN4MQTT4loopEv+0x202>
 80a082a:	f000 f951 	bl	80a0ad0 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a082e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0834:	4353      	muls	r3, r2
 80a0836:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a0838:	4605      	mov	r5, r0
 80a083a:	1a82      	subs	r2, r0, r2
 80a083c:	429a      	cmp	r2, r3
 80a083e:	d803      	bhi.n	80a0848 <_ZN4MQTT4loopEv+0x34>
 80a0840:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a0842:	1a82      	subs	r2, r0, r2
 80a0844:	4293      	cmp	r3, r2
 80a0846:	d217      	bcs.n	80a0878 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a0848:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a084c:	b12b      	cbz	r3, 80a085a <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a084e:	4620      	mov	r0, r4
 80a0850:	f000 fc4c 	bl	80a10ec <_ZN9TCPClient4stopEv>
                return false;
 80a0854:	f04f 0900 	mov.w	r9, #0
 80a0858:	e0dd      	b.n	80a0a16 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a085a:	69e2      	ldr	r2, [r4, #28]
 80a085c:	21c0      	movs	r1, #192	; 0xc0
 80a085e:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a0860:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a0862:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a0864:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a0866:	69e1      	ldr	r1, [r4, #28]
 80a0868:	2202      	movs	r2, #2
 80a086a:	f000 fb60 	bl	80a0f2e <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a086e:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a0870:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a0872:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a0874:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a0878:	4620      	mov	r0, r4
 80a087a:	f000 fbfb 	bl	80a1074 <_ZN9TCPClient9availableEv>
 80a087e:	2800      	cmp	r0, #0
 80a0880:	f000 80c9 	beq.w	80a0a16 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0884:	1df9      	adds	r1, r7, #7
 80a0886:	4620      	mov	r0, r4
 80a0888:	f7ff fd60 	bl	80a034c <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a088c:	4602      	mov	r2, r0
 80a088e:	2800      	cmp	r0, #0
 80a0890:	f000 80c1 	beq.w	80a0a16 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a0894:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a0896:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a0898:	7818      	ldrb	r0, [r3, #0]
 80a089a:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a089e:	2930      	cmp	r1, #48	; 0x30
 80a08a0:	d17d      	bne.n	80a099e <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a08a2:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a08a6:	f1bb 0f00 	cmp.w	fp, #0
 80a08aa:	f000 80b4 	beq.w	80a0a16 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a08ae:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a08b2:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a08b4:	eb03 000c 	add.w	r0, r3, ip
 80a08b8:	7881      	ldrb	r1, [r0, #2]
 80a08ba:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a08be:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a08c2:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a08c6:	f10e 0108 	add.w	r1, lr, #8
 80a08ca:	f021 0107 	bic.w	r1, r1, #7
 80a08ce:	ebad 0d01 	sub.w	sp, sp, r1
 80a08d2:	4668      	mov	r0, sp
 80a08d4:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a08d6:	b28e      	uxth	r6, r1
 80a08d8:	45b6      	cmp	lr, r6
 80a08da:	d906      	bls.n	80a08ea <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a08dc:	eb0c 0601 	add.w	r6, ip, r1
 80a08e0:	441e      	add	r6, r3
 80a08e2:	78f6      	ldrb	r6, [r6, #3]
 80a08e4:	5446      	strb	r6, [r0, r1]
 80a08e6:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a08e8:	e7f5      	b.n	80a08d6 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a08ea:	2100      	movs	r1, #0
 80a08ec:	f800 100e 	strb.w	r1, [r0, lr]
 80a08f0:	781e      	ldrb	r6, [r3, #0]
 80a08f2:	f10c 0103 	add.w	r1, ip, #3
 80a08f6:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a08fa:	2e02      	cmp	r6, #2
 80a08fc:	ebcc 0202 	rsb	r2, ip, r2
 80a0900:	d11e      	bne.n	80a0940 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0902:	4471      	add	r1, lr
 80a0904:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a0908:	4419      	add	r1, r3
 80a090a:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a090c:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0910:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a0914:	f10c 0105 	add.w	r1, ip, #5
 80a0918:	4471      	add	r1, lr
 80a091a:	3a05      	subs	r2, #5
 80a091c:	4419      	add	r1, r3
 80a091e:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a0920:	69e3      	ldr	r3, [r4, #28]
 80a0922:	2240      	movs	r2, #64	; 0x40
 80a0924:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a0926:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0928:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a092c:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a092e:	69e3      	ldr	r3, [r4, #28]
 80a0930:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a0934:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a0936:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a0938:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a093a:	f883 8003 	strb.w	r8, [r3, #3]
 80a093e:	e020      	b.n	80a0982 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a0940:	2e04      	cmp	r6, #4
 80a0942:	d124      	bne.n	80a098e <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a0944:	4471      	add	r1, lr
 80a0946:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a094a:	4419      	add	r1, r3
 80a094c:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a094e:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a0952:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a0956:	f10c 0105 	add.w	r1, ip, #5
 80a095a:	4471      	add	r1, lr
 80a095c:	3a05      	subs	r2, #5
 80a095e:	4419      	add	r1, r3
 80a0960:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a0962:	69e3      	ldr	r3, [r4, #28]
 80a0964:	2250      	movs	r2, #80	; 0x50
 80a0966:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a0968:	69e3      	ldr	r3, [r4, #28]
 80a096a:	2202      	movs	r2, #2
 80a096c:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a096e:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a0970:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a0974:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a0978:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a097a:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a097c:	69e3      	ldr	r3, [r4, #28]
 80a097e:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a0982:	69e1      	ldr	r1, [r4, #28]
 80a0984:	4620      	mov	r0, r4
 80a0986:	f000 fad2 	bl	80a0f2e <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a098a:	6265      	str	r5, [r4, #36]	; 0x24
 80a098c:	e005      	b.n	80a099a <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a098e:	3a03      	subs	r2, #3
 80a0990:	4471      	add	r1, lr
 80a0992:	ebce 0202 	rsb	r2, lr, r2
 80a0996:	4419      	add	r1, r3
 80a0998:	47d8      	blx	fp
 80a099a:	46d5      	mov	sp, sl
 80a099c:	e03b      	b.n	80a0a16 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a099e:	2950      	cmp	r1, #80	; 0x50
 80a09a0:	d108      	bne.n	80a09b4 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a09a2:	7899      	ldrb	r1, [r3, #2]
 80a09a4:	78db      	ldrb	r3, [r3, #3]
 80a09a6:	4620      	mov	r0, r4
 80a09a8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a09ac:	b289      	uxth	r1, r1
 80a09ae:	f7ff fefd 	bl	80a07ac <_ZN4MQTT14publishReleaseEt>
 80a09b2:	e030      	b.n	80a0a16 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a09b4:	2940      	cmp	r1, #64	; 0x40
 80a09b6:	d00c      	beq.n	80a09d2 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a09b8:	2960      	cmp	r1, #96	; 0x60
 80a09ba:	d108      	bne.n	80a09ce <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a09bc:	7899      	ldrb	r1, [r3, #2]
 80a09be:	78db      	ldrb	r3, [r3, #3]
 80a09c0:	4620      	mov	r0, r4
 80a09c2:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a09c6:	b289      	uxth	r1, r1
 80a09c8:	f7ff ff0a 	bl	80a07e0 <_ZN4MQTT15publishCompleteEt>
 80a09cc:	e023      	b.n	80a0a16 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a09ce:	2970      	cmp	r1, #112	; 0x70
 80a09d0:	d10d      	bne.n	80a09ee <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a09d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a09d4:	b1f9      	cbz	r1, 80a0a16 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a09d6:	2a04      	cmp	r2, #4
 80a09d8:	d11d      	bne.n	80a0a16 <_ZN4MQTT4loopEv+0x202>
 80a09da:	f010 0f06 	tst.w	r0, #6
 80a09de:	d11a      	bne.n	80a0a16 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a09e0:	7898      	ldrb	r0, [r3, #2]
 80a09e2:	78db      	ldrb	r3, [r3, #3]
 80a09e4:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a09e8:	b280      	uxth	r0, r0
 80a09ea:	4788      	blx	r1
 80a09ec:	e013      	b.n	80a0a16 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a09ee:	2990      	cmp	r1, #144	; 0x90
 80a09f0:	d011      	beq.n	80a0a16 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a09f2:	29c0      	cmp	r1, #192	; 0xc0
 80a09f4:	d10a      	bne.n	80a0a0c <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a09f6:	22d0      	movs	r2, #208	; 0xd0
 80a09f8:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a09fa:	69e3      	ldr	r3, [r4, #28]
 80a09fc:	2200      	movs	r2, #0
 80a09fe:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a0a00:	69e1      	ldr	r1, [r4, #28]
 80a0a02:	2202      	movs	r2, #2
 80a0a04:	4620      	mov	r0, r4
 80a0a06:	f000 fa92 	bl	80a0f2e <_ZN9TCPClient5writeEPKhj>
 80a0a0a:	e004      	b.n	80a0a16 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a0a0c:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a0a0e:	bf04      	itt	eq
 80a0a10:	2300      	moveq	r3, #0
 80a0a12:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a0a16:	4648      	mov	r0, r9
 80a0a18:	370c      	adds	r7, #12
 80a0a1a:	46bd      	mov	sp, r7
 80a0a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0a20 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0a20:	b510      	push	{r4, lr}
 80a0a22:	4604      	mov	r4, r0
    if (isConnected()) {
 80a0a24:	f7ff fd4b 	bl	80a04be <_ZN4MQTT11isConnectedEv>
 80a0a28:	b110      	cbz	r0, 80a0a30 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a0a2a:	4620      	mov	r0, r4
 80a0a2c:	f7ff fd19 	bl	80a0462 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a0a30:	69e0      	ldr	r0, [r4, #28]
 80a0a32:	b108      	cbz	r0, 80a0a38 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a0a34:	f7ff fb37 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0a38:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0a3c:	f000 fcde 	bl	80a13fc <_ZN6StringD1Ev>
 80a0a40:	4620      	mov	r0, r4
 80a0a42:	f7ff fc0f 	bl	80a0264 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a0a46:	4620      	mov	r0, r4
 80a0a48:	bd10      	pop	{r4, pc}

080a0a4a <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a0a4a:	f000 b801 	b.w	80a0a50 <HAL_Pin_Map>
	...

080a0a50 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <HAL_Pin_Map+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	681b      	ldr	r3, [r3, #0]
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601b0 	.word	0x080601b0

080a0a60 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b02      	ldr	r3, [pc, #8]	; (80a0a6c <HAL_Pin_Mode+0xc>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	689b      	ldr	r3, [r3, #8]
 80a0a68:	9301      	str	r3, [sp, #4]
 80a0a6a:	bd08      	pop	{r3, pc}
 80a0a6c:	080601b0 	.word	0x080601b0

080a0a70 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0a70:	b508      	push	{r3, lr}
 80a0a72:	4b02      	ldr	r3, [pc, #8]	; (80a0a7c <HAL_Get_Pin_Mode+0xc>)
 80a0a74:	681b      	ldr	r3, [r3, #0]
 80a0a76:	68db      	ldr	r3, [r3, #12]
 80a0a78:	9301      	str	r3, [sp, #4]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	080601b0 	.word	0x080601b0

080a0a80 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0a80:	b508      	push	{r3, lr}
 80a0a82:	4b02      	ldr	r3, [pc, #8]	; (80a0a8c <HAL_GPIO_Write+0xc>)
 80a0a84:	681b      	ldr	r3, [r3, #0]
 80a0a86:	691b      	ldr	r3, [r3, #16]
 80a0a88:	9301      	str	r3, [sp, #4]
 80a0a8a:	bd08      	pop	{r3, pc}
 80a0a8c:	080601b0 	.word	0x080601b0

080a0a90 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0a90:	b508      	push	{r3, lr}
 80a0a92:	4b02      	ldr	r3, [pc, #8]	; (80a0a9c <HAL_GPIO_Read+0xc>)
 80a0a94:	681b      	ldr	r3, [r3, #0]
 80a0a96:	695b      	ldr	r3, [r3, #20]
 80a0a98:	9301      	str	r3, [sp, #4]
 80a0a9a:	bd08      	pop	{r3, pc}
 80a0a9c:	080601b0 	.word	0x080601b0

080a0aa0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0aa0:	b508      	push	{r3, lr}
 80a0aa2:	4b02      	ldr	r3, [pc, #8]	; (80a0aac <HAL_SPI_Init+0xc>)
 80a0aa4:	681b      	ldr	r3, [r3, #0]
 80a0aa6:	69db      	ldr	r3, [r3, #28]
 80a0aa8:	9301      	str	r3, [sp, #4]
 80a0aaa:	bd08      	pop	{r3, pc}
 80a0aac:	080601b4 	.word	0x080601b4

080a0ab0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0ab0:	b508      	push	{r3, lr}
 80a0ab2:	4b02      	ldr	r3, [pc, #8]	; (80a0abc <HAL_SPI_Is_Enabled+0xc>)
 80a0ab4:	681b      	ldr	r3, [r3, #0]
 80a0ab6:	6a1b      	ldr	r3, [r3, #32]
 80a0ab8:	9301      	str	r3, [sp, #4]
 80a0aba:	bd08      	pop	{r3, pc}
 80a0abc:	080601b4 	.word	0x080601b4

080a0ac0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0ac0:	b508      	push	{r3, lr}
 80a0ac2:	4b02      	ldr	r3, [pc, #8]	; (80a0acc <HAL_RNG_GetRandomNumber+0xc>)
 80a0ac4:	681b      	ldr	r3, [r3, #0]
 80a0ac6:	685b      	ldr	r3, [r3, #4]
 80a0ac8:	9301      	str	r3, [sp, #4]
 80a0aca:	bd08      	pop	{r3, pc}
 80a0acc:	0806019c 	.word	0x0806019c

080a0ad0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b02      	ldr	r3, [pc, #8]	; (80a0adc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	695b      	ldr	r3, [r3, #20]
 80a0ad8:	9301      	str	r3, [sp, #4]
 80a0ada:	bd08      	pop	{r3, pc}
 80a0adc:	0806019c 	.word	0x0806019c

080a0ae0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0ae0:	b508      	push	{r3, lr}
 80a0ae2:	4b02      	ldr	r3, [pc, #8]	; (80a0aec <os_mutex_recursive_create+0xc>)
 80a0ae4:	681b      	ldr	r3, [r3, #0]
 80a0ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0ae8:	9301      	str	r3, [sp, #4]
 80a0aea:	bd08      	pop	{r3, pc}
 80a0aec:	080601d0 	.word	0x080601d0

080a0af0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0af0:	b508      	push	{r3, lr}
 80a0af2:	4b02      	ldr	r3, [pc, #8]	; (80a0afc <os_mutex_recursive_destroy+0xc>)
 80a0af4:	681b      	ldr	r3, [r3, #0]
 80a0af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0af8:	9301      	str	r3, [sp, #4]
 80a0afa:	bd08      	pop	{r3, pc}
 80a0afc:	080601d0 	.word	0x080601d0

080a0b00 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0b00:	b508      	push	{r3, lr}
 80a0b02:	4b02      	ldr	r3, [pc, #8]	; (80a0b0c <HAL_USART_Init+0xc>)
 80a0b04:	681b      	ldr	r3, [r3, #0]
 80a0b06:	699b      	ldr	r3, [r3, #24]
 80a0b08:	9301      	str	r3, [sp, #4]
 80a0b0a:	bd08      	pop	{r3, pc}
 80a0b0c:	080601c4 	.word	0x080601c4

080a0b10 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0b10:	b508      	push	{r3, lr}
 80a0b12:	4b02      	ldr	r3, [pc, #8]	; (80a0b1c <HAL_USART_Write_Data+0xc>)
 80a0b14:	681b      	ldr	r3, [r3, #0]
 80a0b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0b18:	9301      	str	r3, [sp, #4]
 80a0b1a:	bd08      	pop	{r3, pc}
 80a0b1c:	080601c4 	.word	0x080601c4

080a0b20 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0b20:	b508      	push	{r3, lr}
 80a0b22:	4b02      	ldr	r3, [pc, #8]	; (80a0b2c <HAL_USART_Available_Data+0xc>)
 80a0b24:	681b      	ldr	r3, [r3, #0]
 80a0b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0b28:	9301      	str	r3, [sp, #4]
 80a0b2a:	bd08      	pop	{r3, pc}
 80a0b2c:	080601c4 	.word	0x080601c4

080a0b30 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0b30:	b508      	push	{r3, lr}
 80a0b32:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <HAL_USART_Read_Data+0xc>)
 80a0b34:	681b      	ldr	r3, [r3, #0]
 80a0b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0b38:	9301      	str	r3, [sp, #4]
 80a0b3a:	bd08      	pop	{r3, pc}
 80a0b3c:	080601c4 	.word	0x080601c4

080a0b40 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0b40:	b508      	push	{r3, lr}
 80a0b42:	4b02      	ldr	r3, [pc, #8]	; (80a0b4c <HAL_USART_Peek_Data+0xc>)
 80a0b44:	681b      	ldr	r3, [r3, #0]
 80a0b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b48:	9301      	str	r3, [sp, #4]
 80a0b4a:	bd08      	pop	{r3, pc}
 80a0b4c:	080601c4 	.word	0x080601c4

080a0b50 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0b50:	b508      	push	{r3, lr}
 80a0b52:	4b02      	ldr	r3, [pc, #8]	; (80a0b5c <HAL_USART_Flush_Data+0xc>)
 80a0b54:	681b      	ldr	r3, [r3, #0]
 80a0b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b58:	9301      	str	r3, [sp, #4]
 80a0b5a:	bd08      	pop	{r3, pc}
 80a0b5c:	080601c4 	.word	0x080601c4

080a0b60 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0b60:	b508      	push	{r3, lr}
 80a0b62:	4b02      	ldr	r3, [pc, #8]	; (80a0b6c <HAL_USART_Is_Enabled+0xc>)
 80a0b64:	681b      	ldr	r3, [r3, #0]
 80a0b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0b68:	9301      	str	r3, [sp, #4]
 80a0b6a:	bd08      	pop	{r3, pc}
 80a0b6c:	080601c4 	.word	0x080601c4

080a0b70 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0b70:	b508      	push	{r3, lr}
 80a0b72:	4b02      	ldr	r3, [pc, #8]	; (80a0b7c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0b74:	681b      	ldr	r3, [r3, #0]
 80a0b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0b78:	9301      	str	r3, [sp, #4]
 80a0b7a:	bd08      	pop	{r3, pc}
 80a0b7c:	080601c4 	.word	0x080601c4

080a0b80 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0b80:	b508      	push	{r3, lr}
 80a0b82:	4b02      	ldr	r3, [pc, #8]	; (80a0b8c <HAL_I2C_Write_Data+0xc>)
 80a0b84:	681b      	ldr	r3, [r3, #0]
 80a0b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0b88:	9301      	str	r3, [sp, #4]
 80a0b8a:	bd08      	pop	{r3, pc}
 80a0b8c:	080601ac 	.word	0x080601ac

080a0b90 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0b90:	b508      	push	{r3, lr}
 80a0b92:	4b02      	ldr	r3, [pc, #8]	; (80a0b9c <HAL_I2C_Available_Data+0xc>)
 80a0b94:	681b      	ldr	r3, [r3, #0]
 80a0b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0b98:	9301      	str	r3, [sp, #4]
 80a0b9a:	bd08      	pop	{r3, pc}
 80a0b9c:	080601ac 	.word	0x080601ac

080a0ba0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0ba0:	b508      	push	{r3, lr}
 80a0ba2:	4b02      	ldr	r3, [pc, #8]	; (80a0bac <HAL_I2C_Read_Data+0xc>)
 80a0ba4:	681b      	ldr	r3, [r3, #0]
 80a0ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0ba8:	9301      	str	r3, [sp, #4]
 80a0baa:	bd08      	pop	{r3, pc}
 80a0bac:	080601ac 	.word	0x080601ac

080a0bb0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0bb0:	b508      	push	{r3, lr}
 80a0bb2:	4b02      	ldr	r3, [pc, #8]	; (80a0bbc <HAL_I2C_Peek_Data+0xc>)
 80a0bb4:	681b      	ldr	r3, [r3, #0]
 80a0bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0bb8:	9301      	str	r3, [sp, #4]
 80a0bba:	bd08      	pop	{r3, pc}
 80a0bbc:	080601ac 	.word	0x080601ac

080a0bc0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0bc0:	b508      	push	{r3, lr}
 80a0bc2:	4b02      	ldr	r3, [pc, #8]	; (80a0bcc <HAL_I2C_Flush_Data+0xc>)
 80a0bc4:	681b      	ldr	r3, [r3, #0]
 80a0bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0bc8:	9301      	str	r3, [sp, #4]
 80a0bca:	bd08      	pop	{r3, pc}
 80a0bcc:	080601ac 	.word	0x080601ac

080a0bd0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0bd0:	b508      	push	{r3, lr}
 80a0bd2:	4b02      	ldr	r3, [pc, #8]	; (80a0bdc <HAL_I2C_Is_Enabled+0xc>)
 80a0bd4:	681b      	ldr	r3, [r3, #0]
 80a0bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0bd8:	9301      	str	r3, [sp, #4]
 80a0bda:	bd08      	pop	{r3, pc}
 80a0bdc:	080601ac 	.word	0x080601ac

080a0be0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0be0:	b508      	push	{r3, lr}
 80a0be2:	4b03      	ldr	r3, [pc, #12]	; (80a0bf0 <HAL_I2C_Init+0x10>)
 80a0be4:	681b      	ldr	r3, [r3, #0]
 80a0be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0bea:	9301      	str	r3, [sp, #4]
 80a0bec:	bd08      	pop	{r3, pc}
 80a0bee:	0000      	.short	0x0000
 80a0bf0:	080601ac 	.word	0x080601ac

080a0bf4 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0bf4:	b508      	push	{r3, lr}
 80a0bf6:	4b02      	ldr	r3, [pc, #8]	; (80a0c00 <socket_active_status+0xc>)
 80a0bf8:	681b      	ldr	r3, [r3, #0]
 80a0bfa:	681b      	ldr	r3, [r3, #0]
 80a0bfc:	9301      	str	r3, [sp, #4]
 80a0bfe:	bd08      	pop	{r3, pc}
 80a0c00:	080601bc 	.word	0x080601bc

080a0c04 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0c04:	b508      	push	{r3, lr}
 80a0c06:	4b02      	ldr	r3, [pc, #8]	; (80a0c10 <socket_handle_valid+0xc>)
 80a0c08:	681b      	ldr	r3, [r3, #0]
 80a0c0a:	685b      	ldr	r3, [r3, #4]
 80a0c0c:	9301      	str	r3, [sp, #4]
 80a0c0e:	bd08      	pop	{r3, pc}
 80a0c10:	080601bc 	.word	0x080601bc

080a0c14 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0c14:	b508      	push	{r3, lr}
 80a0c16:	4b02      	ldr	r3, [pc, #8]	; (80a0c20 <socket_create+0xc>)
 80a0c18:	681b      	ldr	r3, [r3, #0]
 80a0c1a:	689b      	ldr	r3, [r3, #8]
 80a0c1c:	9301      	str	r3, [sp, #4]
 80a0c1e:	bd08      	pop	{r3, pc}
 80a0c20:	080601bc 	.word	0x080601bc

080a0c24 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0c24:	b508      	push	{r3, lr}
 80a0c26:	4b02      	ldr	r3, [pc, #8]	; (80a0c30 <socket_connect+0xc>)
 80a0c28:	681b      	ldr	r3, [r3, #0]
 80a0c2a:	68db      	ldr	r3, [r3, #12]
 80a0c2c:	9301      	str	r3, [sp, #4]
 80a0c2e:	bd08      	pop	{r3, pc}
 80a0c30:	080601bc 	.word	0x080601bc

080a0c34 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0c34:	b508      	push	{r3, lr}
 80a0c36:	4b02      	ldr	r3, [pc, #8]	; (80a0c40 <socket_receive+0xc>)
 80a0c38:	681b      	ldr	r3, [r3, #0]
 80a0c3a:	691b      	ldr	r3, [r3, #16]
 80a0c3c:	9301      	str	r3, [sp, #4]
 80a0c3e:	bd08      	pop	{r3, pc}
 80a0c40:	080601bc 	.word	0x080601bc

080a0c44 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0c44:	b508      	push	{r3, lr}
 80a0c46:	4b02      	ldr	r3, [pc, #8]	; (80a0c50 <socket_close+0xc>)
 80a0c48:	681b      	ldr	r3, [r3, #0]
 80a0c4a:	6a1b      	ldr	r3, [r3, #32]
 80a0c4c:	9301      	str	r3, [sp, #4]
 80a0c4e:	bd08      	pop	{r3, pc}
 80a0c50:	080601bc 	.word	0x080601bc

080a0c54 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b02      	ldr	r3, [pc, #8]	; (80a0c60 <socket_handle_invalid+0xc>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c5c:	9301      	str	r3, [sp, #4]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	080601bc 	.word	0x080601bc

080a0c64 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0c64:	b508      	push	{r3, lr}
 80a0c66:	4b02      	ldr	r3, [pc, #8]	; (80a0c70 <socket_send_ex+0xc>)
 80a0c68:	681b      	ldr	r3, [r3, #0]
 80a0c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0c6c:	9301      	str	r3, [sp, #4]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	080601bc 	.word	0x080601bc

080a0c74 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0c74:	b508      	push	{r3, lr}
 80a0c76:	4b02      	ldr	r3, [pc, #8]	; (80a0c80 <HAL_USB_USART_Init+0xc>)
 80a0c78:	681b      	ldr	r3, [r3, #0]
 80a0c7a:	681b      	ldr	r3, [r3, #0]
 80a0c7c:	9301      	str	r3, [sp, #4]
 80a0c7e:	bd08      	pop	{r3, pc}
 80a0c80:	080601d8 	.word	0x080601d8

080a0c84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0c84:	b508      	push	{r3, lr}
 80a0c86:	4b02      	ldr	r3, [pc, #8]	; (80a0c90 <HAL_USB_USART_Available_Data+0xc>)
 80a0c88:	681b      	ldr	r3, [r3, #0]
 80a0c8a:	691b      	ldr	r3, [r3, #16]
 80a0c8c:	9301      	str	r3, [sp, #4]
 80a0c8e:	bd08      	pop	{r3, pc}
 80a0c90:	080601d8 	.word	0x080601d8

080a0c94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0c94:	b508      	push	{r3, lr}
 80a0c96:	4b02      	ldr	r3, [pc, #8]	; (80a0ca0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0c98:	681b      	ldr	r3, [r3, #0]
 80a0c9a:	695b      	ldr	r3, [r3, #20]
 80a0c9c:	9301      	str	r3, [sp, #4]
 80a0c9e:	bd08      	pop	{r3, pc}
 80a0ca0:	080601d8 	.word	0x080601d8

080a0ca4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0ca4:	b508      	push	{r3, lr}
 80a0ca6:	4b02      	ldr	r3, [pc, #8]	; (80a0cb0 <HAL_USB_USART_Receive_Data+0xc>)
 80a0ca8:	681b      	ldr	r3, [r3, #0]
 80a0caa:	699b      	ldr	r3, [r3, #24]
 80a0cac:	9301      	str	r3, [sp, #4]
 80a0cae:	bd08      	pop	{r3, pc}
 80a0cb0:	080601d8 	.word	0x080601d8

080a0cb4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0cb4:	b508      	push	{r3, lr}
 80a0cb6:	4b02      	ldr	r3, [pc, #8]	; (80a0cc0 <HAL_USB_USART_Send_Data+0xc>)
 80a0cb8:	681b      	ldr	r3, [r3, #0]
 80a0cba:	69db      	ldr	r3, [r3, #28]
 80a0cbc:	9301      	str	r3, [sp, #4]
 80a0cbe:	bd08      	pop	{r3, pc}
 80a0cc0:	080601d8 	.word	0x080601d8

080a0cc4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0cc4:	b508      	push	{r3, lr}
 80a0cc6:	4b02      	ldr	r3, [pc, #8]	; (80a0cd0 <HAL_USB_USART_Flush_Data+0xc>)
 80a0cc8:	681b      	ldr	r3, [r3, #0]
 80a0cca:	6a1b      	ldr	r3, [r3, #32]
 80a0ccc:	9301      	str	r3, [sp, #4]
 80a0cce:	bd08      	pop	{r3, pc}
 80a0cd0:	080601d8 	.word	0x080601d8

080a0cd4 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0cd4:	b508      	push	{r3, lr}
 80a0cd6:	4b02      	ldr	r3, [pc, #8]	; (80a0ce0 <HAL_NET_SetNetWatchDog+0xc>)
 80a0cd8:	681b      	ldr	r3, [r3, #0]
 80a0cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0cdc:	9301      	str	r3, [sp, #4]
 80a0cde:	bd08      	pop	{r3, pc}
 80a0ce0:	080601c0 	.word	0x080601c0

080a0ce4 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0ce4:	b508      	push	{r3, lr}
 80a0ce6:	4b02      	ldr	r3, [pc, #8]	; (80a0cf0 <inet_gethostbyname+0xc>)
 80a0ce8:	681b      	ldr	r3, [r3, #0]
 80a0cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0cec:	9301      	str	r3, [sp, #4]
 80a0cee:	bd08      	pop	{r3, pc}
 80a0cf0:	080601c0 	.word	0x080601c0

080a0cf4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0cf4:	b508      	push	{r3, lr}
 80a0cf6:	4b02      	ldr	r3, [pc, #8]	; (80a0d00 <log_message+0xc>)
 80a0cf8:	681b      	ldr	r3, [r3, #0]
 80a0cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0cfc:	9301      	str	r3, [sp, #4]
 80a0cfe:	bd08      	pop	{r3, pc}
 80a0d00:	080201a8 	.word	0x080201a8

080a0d04 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0d04:	b508      	push	{r3, lr}
 80a0d06:	4b02      	ldr	r3, [pc, #8]	; (80a0d10 <set_system_mode+0xc>)
 80a0d08:	681b      	ldr	r3, [r3, #0]
 80a0d0a:	685b      	ldr	r3, [r3, #4]
 80a0d0c:	9301      	str	r3, [sp, #4]
 80a0d0e:	bd08      	pop	{r3, pc}
 80a0d10:	080601a4 	.word	0x080601a4

080a0d14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0d14:	b508      	push	{r3, lr}
 80a0d16:	4b02      	ldr	r3, [pc, #8]	; (80a0d20 <system_delay_ms+0xc>)
 80a0d18:	681b      	ldr	r3, [r3, #0]
 80a0d1a:	695b      	ldr	r3, [r3, #20]
 80a0d1c:	9301      	str	r3, [sp, #4]
 80a0d1e:	bd08      	pop	{r3, pc}
 80a0d20:	080601a4 	.word	0x080601a4

080a0d24 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0d24:	b508      	push	{r3, lr}
 80a0d26:	4b02      	ldr	r3, [pc, #8]	; (80a0d30 <application_thread_current+0xc>)
 80a0d28:	681b      	ldr	r3, [r3, #0]
 80a0d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0d2c:	9301      	str	r3, [sp, #4]
 80a0d2e:	bd08      	pop	{r3, pc}
 80a0d30:	080601a4 	.word	0x080601a4

080a0d34 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0d34:	b508      	push	{r3, lr}
 80a0d36:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <application_thread_invoke+0xc>)
 80a0d38:	681b      	ldr	r3, [r3, #0]
 80a0d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0d3c:	9301      	str	r3, [sp, #4]
 80a0d3e:	bd08      	pop	{r3, pc}
 80a0d40:	080601a4 	.word	0x080601a4

080a0d44 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0d44:	b508      	push	{r3, lr}
 80a0d46:	4b03      	ldr	r3, [pc, #12]	; (80a0d54 <system_ctrl_set_app_request_handler+0x10>)
 80a0d48:	681b      	ldr	r3, [r3, #0]
 80a0d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0d4e:	9301      	str	r3, [sp, #4]
 80a0d50:	bd08      	pop	{r3, pc}
 80a0d52:	0000      	.short	0x0000
 80a0d54:	080601a4 	.word	0x080601a4

080a0d58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0d58:	b508      	push	{r3, lr}
 80a0d5a:	4b03      	ldr	r3, [pc, #12]	; (80a0d68 <system_ctrl_set_result+0x10>)
 80a0d5c:	681b      	ldr	r3, [r3, #0]
 80a0d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0d62:	9301      	str	r3, [sp, #4]
 80a0d64:	bd08      	pop	{r3, pc}
 80a0d66:	0000      	.short	0x0000
 80a0d68:	080601a4 	.word	0x080601a4

080a0d6c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d6c:	b508      	push	{r3, lr}
 80a0d6e:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <network_connect+0xc>)
 80a0d70:	681b      	ldr	r3, [r3, #0]
 80a0d72:	685b      	ldr	r3, [r3, #4]
 80a0d74:	9301      	str	r3, [sp, #4]
 80a0d76:	bd08      	pop	{r3, pc}
 80a0d78:	080601c8 	.word	0x080601c8

080a0d7c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0d7c:	b508      	push	{r3, lr}
 80a0d7e:	4b02      	ldr	r3, [pc, #8]	; (80a0d88 <network_connecting+0xc>)
 80a0d80:	681b      	ldr	r3, [r3, #0]
 80a0d82:	689b      	ldr	r3, [r3, #8]
 80a0d84:	9301      	str	r3, [sp, #4]
 80a0d86:	bd08      	pop	{r3, pc}
 80a0d88:	080601c8 	.word	0x080601c8

080a0d8c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0d8c:	b508      	push	{r3, lr}
 80a0d8e:	4b02      	ldr	r3, [pc, #8]	; (80a0d98 <network_disconnect+0xc>)
 80a0d90:	681b      	ldr	r3, [r3, #0]
 80a0d92:	68db      	ldr	r3, [r3, #12]
 80a0d94:	9301      	str	r3, [sp, #4]
 80a0d96:	bd08      	pop	{r3, pc}
 80a0d98:	080601c8 	.word	0x080601c8

080a0d9c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0d9c:	b508      	push	{r3, lr}
 80a0d9e:	4b02      	ldr	r3, [pc, #8]	; (80a0da8 <network_ready+0xc>)
 80a0da0:	681b      	ldr	r3, [r3, #0]
 80a0da2:	691b      	ldr	r3, [r3, #16]
 80a0da4:	9301      	str	r3, [sp, #4]
 80a0da6:	bd08      	pop	{r3, pc}
 80a0da8:	080601c8 	.word	0x080601c8

080a0dac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0dac:	b508      	push	{r3, lr}
 80a0dae:	4b02      	ldr	r3, [pc, #8]	; (80a0db8 <network_on+0xc>)
 80a0db0:	681b      	ldr	r3, [r3, #0]
 80a0db2:	695b      	ldr	r3, [r3, #20]
 80a0db4:	9301      	str	r3, [sp, #4]
 80a0db6:	bd08      	pop	{r3, pc}
 80a0db8:	080601c8 	.word	0x080601c8

080a0dbc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0dbc:	b508      	push	{r3, lr}
 80a0dbe:	4b02      	ldr	r3, [pc, #8]	; (80a0dc8 <network_off+0xc>)
 80a0dc0:	681b      	ldr	r3, [r3, #0]
 80a0dc2:	699b      	ldr	r3, [r3, #24]
 80a0dc4:	9301      	str	r3, [sp, #4]
 80a0dc6:	bd08      	pop	{r3, pc}
 80a0dc8:	080601c8 	.word	0x080601c8

080a0dcc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0dcc:	b508      	push	{r3, lr}
 80a0dce:	4b02      	ldr	r3, [pc, #8]	; (80a0dd8 <network_listen+0xc>)
 80a0dd0:	681b      	ldr	r3, [r3, #0]
 80a0dd2:	69db      	ldr	r3, [r3, #28]
 80a0dd4:	9301      	str	r3, [sp, #4]
 80a0dd6:	bd08      	pop	{r3, pc}
 80a0dd8:	080601c8 	.word	0x080601c8

080a0ddc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0ddc:	b508      	push	{r3, lr}
 80a0dde:	4b02      	ldr	r3, [pc, #8]	; (80a0de8 <network_listening+0xc>)
 80a0de0:	681b      	ldr	r3, [r3, #0]
 80a0de2:	6a1b      	ldr	r3, [r3, #32]
 80a0de4:	9301      	str	r3, [sp, #4]
 80a0de6:	bd08      	pop	{r3, pc}
 80a0de8:	080601c8 	.word	0x080601c8

080a0dec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0dec:	b508      	push	{r3, lr}
 80a0dee:	4b02      	ldr	r3, [pc, #8]	; (80a0df8 <network_set_listen_timeout+0xc>)
 80a0df0:	681b      	ldr	r3, [r3, #0]
 80a0df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0df4:	9301      	str	r3, [sp, #4]
 80a0df6:	bd08      	pop	{r3, pc}
 80a0df8:	080601c8 	.word	0x080601c8

080a0dfc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0dfc:	b508      	push	{r3, lr}
 80a0dfe:	4b02      	ldr	r3, [pc, #8]	; (80a0e08 <network_get_listen_timeout+0xc>)
 80a0e00:	681b      	ldr	r3, [r3, #0]
 80a0e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0e04:	9301      	str	r3, [sp, #4]
 80a0e06:	bd08      	pop	{r3, pc}
 80a0e08:	080601c8 	.word	0x080601c8

080a0e0c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0e0c:	b508      	push	{r3, lr}
 80a0e0e:	4b02      	ldr	r3, [pc, #8]	; (80a0e18 <spark_cloud_flag_connected+0xc>)
 80a0e10:	681b      	ldr	r3, [r3, #0]
 80a0e12:	695b      	ldr	r3, [r3, #20]
 80a0e14:	9301      	str	r3, [sp, #4]
 80a0e16:	bd08      	pop	{r3, pc}
 80a0e18:	080601cc 	.word	0x080601cc

080a0e1c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0e1c:	b508      	push	{r3, lr}
 80a0e1e:	4b02      	ldr	r3, [pc, #8]	; (80a0e28 <spark_send_event+0xc>)
 80a0e20:	681b      	ldr	r3, [r3, #0]
 80a0e22:	6a1b      	ldr	r3, [r3, #32]
 80a0e24:	9301      	str	r3, [sp, #4]
 80a0e26:	bd08      	pop	{r3, pc}
 80a0e28:	080601cc 	.word	0x080601cc

080a0e2c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a0e2c:	b508      	push	{r3, lr}
 80a0e2e:	4b02      	ldr	r3, [pc, #8]	; (80a0e38 <spark_subscribe+0xc>)
 80a0e30:	681b      	ldr	r3, [r3, #0]
 80a0e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0e34:	9301      	str	r3, [sp, #4]
 80a0e36:	bd08      	pop	{r3, pc}
 80a0e38:	080601cc 	.word	0x080601cc

080a0e3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0e3c:	b508      	push	{r3, lr}
 80a0e3e:	4b02      	ldr	r3, [pc, #8]	; (80a0e48 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0e40:	681b      	ldr	r3, [r3, #0]
 80a0e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0e44:	9301      	str	r3, [sp, #4]
 80a0e46:	bd08      	pop	{r3, pc}
 80a0e48:	080601cc 	.word	0x080601cc

080a0e4c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0e4c:	b508      	push	{r3, lr}
 80a0e4e:	4b02      	ldr	r3, [pc, #8]	; (80a0e58 <malloc+0xc>)
 80a0e50:	681b      	ldr	r3, [r3, #0]
 80a0e52:	681b      	ldr	r3, [r3, #0]
 80a0e54:	9301      	str	r3, [sp, #4]
 80a0e56:	bd08      	pop	{r3, pc}
 80a0e58:	080601a0 	.word	0x080601a0

080a0e5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0e5c:	b508      	push	{r3, lr}
 80a0e5e:	4b02      	ldr	r3, [pc, #8]	; (80a0e68 <free+0xc>)
 80a0e60:	681b      	ldr	r3, [r3, #0]
 80a0e62:	685b      	ldr	r3, [r3, #4]
 80a0e64:	9301      	str	r3, [sp, #4]
 80a0e66:	bd08      	pop	{r3, pc}
 80a0e68:	080601a0 	.word	0x080601a0

080a0e6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0e6c:	b508      	push	{r3, lr}
 80a0e6e:	4b02      	ldr	r3, [pc, #8]	; (80a0e78 <realloc+0xc>)
 80a0e70:	681b      	ldr	r3, [r3, #0]
 80a0e72:	689b      	ldr	r3, [r3, #8]
 80a0e74:	9301      	str	r3, [sp, #4]
 80a0e76:	bd08      	pop	{r3, pc}
 80a0e78:	080601a0 	.word	0x080601a0

080a0e7c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0e7c:	b508      	push	{r3, lr}
 80a0e7e:	4b02      	ldr	r3, [pc, #8]	; (80a0e88 <abort+0xc>)
 80a0e80:	681b      	ldr	r3, [r3, #0]
 80a0e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e84:	9301      	str	r3, [sp, #4]
 80a0e86:	bd08      	pop	{r3, pc}
 80a0e88:	080601a0 	.word	0x080601a0

080a0e8c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0e8c:	b508      	push	{r3, lr}
 80a0e8e:	4b02      	ldr	r3, [pc, #8]	; (80a0e98 <_malloc_r+0xc>)
 80a0e90:	681b      	ldr	r3, [r3, #0]
 80a0e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e94:	9301      	str	r3, [sp, #4]
 80a0e96:	bd08      	pop	{r3, pc}
 80a0e98:	080601a0 	.word	0x080601a0

080a0e9c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0e9c:	b570      	push	{r4, r5, r6, lr}
 80a0e9e:	4604      	mov	r4, r0
 80a0ea0:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0ea2:	2500      	movs	r5, #0
 80a0ea4:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0ea8:	f7ff fe1a 	bl	80a0ae0 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0eac:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0eae:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0eb0:	f7ff fdf6 	bl	80a0aa0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0eb4:	6065      	str	r5, [r4, #4]
}
 80a0eb6:	4620      	mov	r0, r4
 80a0eb8:	bd70      	pop	{r4, r5, r6, pc}

080a0eba <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a0eba:	7800      	ldrb	r0, [r0, #0]
 80a0ebc:	f7ff bdf8 	b.w	80a0ab0 <HAL_SPI_Is_Enabled>

080a0ec0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0ec0:	b510      	push	{r4, lr}
 80a0ec2:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0ec4:	6800      	ldr	r0, [r0, #0]
 80a0ec6:	b118      	cbz	r0, 80a0ed0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0ec8:	f7ff ffc8 	bl	80a0e5c <free>
            wakeupSource_ = nullptr;
 80a0ecc:	2300      	movs	r3, #0
 80a0ece:	6023      	str	r3, [r4, #0]
 80a0ed0:	bd10      	pop	{r4, pc}

080a0ed2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0ed2:	b510      	push	{r4, lr}
 80a0ed4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a0ed6:	f7ff fff3 	bl	80a0ec0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0eda:	4620      	mov	r0, r4
 80a0edc:	bd10      	pop	{r4, pc}
	...

080a0ee0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0ee4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0ee6:	4c08      	ldr	r4, [pc, #32]	; (80a0f08 <_GLOBAL__sub_I_System+0x28>)
 80a0ee8:	2000      	movs	r0, #0
 80a0eea:	6020      	str	r0, [r4, #0]
 80a0eec:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0eee:	71a0      	strb	r0, [r4, #6]
 80a0ef0:	8120      	strh	r0, [r4, #8]
 80a0ef2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0ef4:	f7ff ff06 	bl	80a0d04 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0ef8:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0efe:	4a03      	ldr	r2, [pc, #12]	; (80a0f0c <_GLOBAL__sub_I_System+0x2c>)
 80a0f00:	4903      	ldr	r1, [pc, #12]	; (80a0f10 <_GLOBAL__sub_I_System+0x30>)
 80a0f02:	f001 babb 	b.w	80a247c <__aeabi_atexit>
 80a0f06:	bf00      	nop
 80a0f08:	20000180 	.word	0x20000180
 80a0f0c:	200000c0 	.word	0x200000c0
 80a0f10:	080a0ed3 	.word	0x080a0ed3

080a0f14 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a0f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0f16:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0f18:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a0f1a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0f1e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a0f20:	2201      	movs	r2, #1
 80a0f22:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0f26:	4621      	mov	r1, r4
 80a0f28:	47a8      	blx	r5
}
 80a0f2a:	b003      	add	sp, #12
 80a0f2c:	bd30      	pop	{r4, r5, pc}

080a0f2e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a0f2e:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0f30:	6803      	ldr	r3, [r0, #0]
 80a0f32:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0f34:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0f38:	46a4      	mov	ip, r4
}
 80a0f3a:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0f3c:	4760      	bx	ip

080a0f3e <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a0f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0f40:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a0f42:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a0f44:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a0f48:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a0f4a:	4621      	mov	r1, r4
 80a0f4c:	4613      	mov	r3, r2
 80a0f4e:	2201      	movs	r2, #1
 80a0f50:	47a8      	blx	r5
}
 80a0f52:	b003      	add	sp, #12
 80a0f54:	bd30      	pop	{r4, r5, pc}

080a0f56 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a0f56:	4770      	bx	lr

080a0f58 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a0f58:	4770      	bx	lr

080a0f5a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a0f5a:	2000      	movs	r0, #0
 80a0f5c:	4770      	bx	lr

080a0f5e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a0f5e:	b510      	push	{r4, lr}
 80a0f60:	4604      	mov	r4, r0
 80a0f62:	2114      	movs	r1, #20
 80a0f64:	f001 fa98 	bl	80a2498 <_ZdlPvj>
 80a0f68:	4620      	mov	r0, r4
 80a0f6a:	bd10      	pop	{r4, pc}

080a0f6c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a0f6c:	f7ff b899 	b.w	80a00a2 <_ZdlPv>

080a0f70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a0f70:	b510      	push	{r4, lr}
 80a0f72:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a0f74:	6803      	ldr	r3, [r0, #0]
 80a0f76:	689b      	ldr	r3, [r3, #8]
 80a0f78:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0f7a:	68a3      	ldr	r3, [r4, #8]
 80a0f7c:	3b01      	subs	r3, #1
 80a0f7e:	60a3      	str	r3, [r4, #8]
 80a0f80:	b92b      	cbnz	r3, 80a0f8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80a0f82:	6823      	ldr	r3, [r4, #0]
 80a0f84:	4620      	mov	r0, r4
        }
    }
 80a0f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a0f8a:	68db      	ldr	r3, [r3, #12]
 80a0f8c:	4718      	bx	r3
 80a0f8e:	bd10      	pop	{r4, pc}

080a0f90 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a0f90:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0f92:	4604      	mov	r4, r0
 80a0f94:	4606      	mov	r6, r0
 80a0f96:	694d      	ldr	r5, [r1, #20]
 80a0f98:	4b04      	ldr	r3, [pc, #16]	; (80a0fac <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a0f9a:	358c      	adds	r5, #140	; 0x8c
 80a0f9c:	f844 3b04 	str.w	r3, [r4], #4
 80a0fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0fa4:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a0fa6:	4630      	mov	r0, r6
 80a0fa8:	7023      	strb	r3, [r4, #0]
 80a0faa:	bd70      	pop	{r4, r5, r6, pc}
 80a0fac:	080a2a7c 	.word	0x080a2a7c

080a0fb0 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a0fb0:	b510      	push	{r4, lr}
 80a0fb2:	6943      	ldr	r3, [r0, #20]
 80a0fb4:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a0fb6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0fba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a0fbe:	429a      	cmp	r2, r3
 80a0fc0:	d005      	beq.n	80a0fce <_ZN9TCPClient4peekEv+0x1e>
 80a0fc2:	6962      	ldr	r2, [r4, #20]
 80a0fc4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a0fc8:	4413      	add	r3, r2
 80a0fca:	7918      	ldrb	r0, [r3, #4]
 80a0fcc:	bd10      	pop	{r4, pc}
 80a0fce:	6803      	ldr	r3, [r0, #0]
 80a0fd0:	691b      	ldr	r3, [r3, #16]
 80a0fd2:	4798      	blx	r3
 80a0fd4:	2800      	cmp	r0, #0
 80a0fd6:	d1f4      	bne.n	80a0fc2 <_ZN9TCPClient4peekEv+0x12>
 80a0fd8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a0fdc:	bd10      	pop	{r4, pc}

080a0fde <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a0fde:	b510      	push	{r4, lr}
 80a0fe0:	6943      	ldr	r3, [r0, #20]
 80a0fe2:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a0fe4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0fe8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a0fec:	429a      	cmp	r2, r3
 80a0fee:	d008      	beq.n	80a1002 <_ZN9TCPClient4readEv+0x24>
 80a0ff0:	6962      	ldr	r2, [r4, #20]
 80a0ff2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a0ff6:	1c59      	adds	r1, r3, #1
 80a0ff8:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a0ffc:	4413      	add	r3, r2
 80a0ffe:	7918      	ldrb	r0, [r3, #4]
 80a1000:	bd10      	pop	{r4, pc}
 80a1002:	6803      	ldr	r3, [r0, #0]
 80a1004:	691b      	ldr	r3, [r3, #16]
 80a1006:	4798      	blx	r3
 80a1008:	2800      	cmp	r0, #0
 80a100a:	d1f1      	bne.n	80a0ff0 <_ZN9TCPClient4readEv+0x12>
 80a100c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a1010:	bd10      	pop	{r4, pc}

080a1012 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1014:	6943      	ldr	r3, [r0, #20]
 80a1016:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1018:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a101c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1020:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a1022:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1024:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1026:	d106      	bne.n	80a1036 <_ZN9TCPClient4readEPhj+0x24>
 80a1028:	6803      	ldr	r3, [r0, #0]
 80a102a:	691b      	ldr	r3, [r3, #16]
 80a102c:	4798      	blx	r3
 80a102e:	b910      	cbnz	r0, 80a1036 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a1030:	f04f 34ff 	mov.w	r4, #4294967295
 80a1034:	e014      	b.n	80a1060 <_ZN9TCPClient4readEPhj+0x4e>
 80a1036:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1038:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a103a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a103e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1042:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1044:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1046:	42bc      	cmp	r4, r7
 80a1048:	bf28      	it	cs
 80a104a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a104c:	3104      	adds	r1, #4
 80a104e:	4622      	mov	r2, r4
 80a1050:	f001 fb8e 	bl	80a2770 <memcpy>
 80a1054:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1056:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a105a:	4423      	add	r3, r4
 80a105c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1060:	4620      	mov	r0, r4
 80a1062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1064 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1064:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a1066:	2300      	movs	r3, #0
 80a1068:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a106c:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a106e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1072:	4770      	bx	lr

080a1074 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1074:	b538      	push	{r3, r4, r5, lr}
 80a1076:	6942      	ldr	r2, [r0, #20]
 80a1078:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a107a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a107e:	b11b      	cbz	r3, 80a1088 <_ZN9TCPClient9availableEv+0x14>
 80a1080:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1084:	429a      	cmp	r2, r3
 80a1086:	d00c      	beq.n	80a10a2 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1088:	6920      	ldr	r0, [r4, #16]
 80a108a:	f001 f905 	bl	80a2298 <_ZN5spark12NetworkClass4fromEm>
 80a108e:	6803      	ldr	r3, [r0, #0]
 80a1090:	68db      	ldr	r3, [r3, #12]
 80a1092:	4798      	blx	r3
 80a1094:	b318      	cbz	r0, 80a10de <_ZN9TCPClient9availableEv+0x6a>
 80a1096:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1098:	6818      	ldr	r0, [r3, #0]
 80a109a:	f7ff fdb3 	bl	80a0c04 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a109e:	b918      	cbnz	r0, 80a10a8 <_ZN9TCPClient9availableEv+0x34>
 80a10a0:	e01d      	b.n	80a10de <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a10a2:	f7ff ffdf 	bl	80a1064 <_ZN9TCPClient12flush_bufferEv>
 80a10a6:	e7ef      	b.n	80a1088 <_ZN9TCPClient9availableEv+0x14>
 80a10a8:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a10aa:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a10ae:	297f      	cmp	r1, #127	; 0x7f
 80a10b0:	d815      	bhi.n	80a10de <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a10b2:	1d05      	adds	r5, r0, #4
 80a10b4:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a10b8:	2300      	movs	r3, #0
 80a10ba:	4429      	add	r1, r5
 80a10bc:	6800      	ldr	r0, [r0, #0]
 80a10be:	f7ff fdb9 	bl	80a0c34 <socket_receive>
            if (ret > 0)
 80a10c2:	2800      	cmp	r0, #0
 80a10c4:	dd0b      	ble.n	80a10de <_ZN9TCPClient9availableEv+0x6a>
 80a10c6:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a10c8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a10cc:	b90a      	cbnz	r2, 80a10d2 <_ZN9TCPClient9availableEv+0x5e>
 80a10ce:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a10d2:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a10d4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a10d8:	4418      	add	r0, r3
 80a10da:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a10de:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a10e0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a10e4:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a10e8:	1a18      	subs	r0, r3, r0
}
 80a10ea:	bd38      	pop	{r3, r4, r5, pc}

080a10ec <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a10ec:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a10ee:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a10f0:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a10f2:	6818      	ldr	r0, [r3, #0]
 80a10f4:	f7ff fd86 	bl	80a0c04 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a10f8:	b118      	cbz	r0, 80a1102 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a10fa:	6963      	ldr	r3, [r4, #20]
 80a10fc:	6818      	ldr	r0, [r3, #0]
 80a10fe:	f7ff fda1 	bl	80a0c44 <socket_close>
 80a1102:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1104:	f7ff fda6 	bl	80a0c54 <socket_handle_invalid>
 80a1108:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a110a:	6960      	ldr	r0, [r4, #20]
 80a110c:	2211      	movs	r2, #17
 80a110e:	2100      	movs	r1, #0
 80a1110:	308c      	adds	r0, #140	; 0x8c
 80a1112:	f001 fb38 	bl	80a2786 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1116:	4620      	mov	r0, r4
}
 80a1118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a111c:	f7ff bfa2 	b.w	80a1064 <_ZN9TCPClient12flush_bufferEv>

080a1120 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1124:	461f      	mov	r7, r3
    stop();
 80a1126:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1128:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a112c:	4606      	mov	r6, r0
 80a112e:	460c      	mov	r4, r1
 80a1130:	4615      	mov	r5, r2
    stop();
 80a1132:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a1134:	4638      	mov	r0, r7
 80a1136:	f001 f8af 	bl	80a2298 <_ZN5spark12NetworkClass4fromEm>
 80a113a:	6803      	ldr	r3, [r0, #0]
 80a113c:	68db      	ldr	r3, [r3, #12]
 80a113e:	4798      	blx	r3
 80a1140:	2800      	cmp	r0, #0
 80a1142:	d056      	beq.n	80a11f2 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1144:	9700      	str	r7, [sp, #0]
 80a1146:	462b      	mov	r3, r5
 80a1148:	2206      	movs	r2, #6
 80a114a:	2101      	movs	r1, #1
 80a114c:	2002      	movs	r0, #2
 80a114e:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a1152:	f7ff fd5f 	bl	80a0c14 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1156:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1158:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a115c:	2700      	movs	r7, #0
 80a115e:	9302      	str	r3, [sp, #8]
 80a1160:	6973      	ldr	r3, [r6, #20]
 80a1162:	9703      	str	r7, [sp, #12]
 80a1164:	681b      	ldr	r3, [r3, #0]
 80a1166:	2001      	movs	r0, #1
 80a1168:	9301      	str	r3, [sp, #4]
 80a116a:	4b23      	ldr	r3, [pc, #140]	; (80a11f8 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a116c:	aa02      	add	r2, sp, #8
 80a116e:	9300      	str	r3, [sp, #0]
 80a1170:	4922      	ldr	r1, [pc, #136]	; (80a11fc <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1172:	463b      	mov	r3, r7
 80a1174:	f7ff fdbe 	bl	80a0cf4 <log_message>

          if (socket_handle_valid(d_->sock))
 80a1178:	6973      	ldr	r3, [r6, #20]
 80a117a:	6818      	ldr	r0, [r3, #0]
 80a117c:	f7ff fd42 	bl	80a0c04 <socket_handle_valid>
 80a1180:	2800      	cmp	r0, #0
 80a1182:	d036      	beq.n	80a11f2 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a1184:	4630      	mov	r0, r6
 80a1186:	f7ff ff6d 	bl	80a1064 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a118a:	2302      	movs	r3, #2
 80a118c:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1190:	0a2b      	lsrs	r3, r5, #8
 80a1192:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1196:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1198:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a119c:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a11a0:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a11a2:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a11a6:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a11aa:	7963      	ldrb	r3, [r4, #5]
 80a11ac:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a11b0:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a11b4:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a11b8:	f7ff fd8c 	bl	80a0cd4 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a11bc:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a11be:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a11c0:	2210      	movs	r2, #16
 80a11c2:	a902      	add	r1, sp, #8
 80a11c4:	6818      	ldr	r0, [r3, #0]
 80a11c6:	f7ff fd2d 	bl	80a0c24 <socket_connect>
 80a11ca:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a11cc:	4628      	mov	r0, r5
 80a11ce:	f7ff fd81 	bl	80a0cd4 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a11d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a11d4:	6975      	ldr	r5, [r6, #20]
 80a11d6:	358c      	adds	r5, #140	; 0x8c
 80a11d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a11da:	6823      	ldr	r3, [r4, #0]
 80a11dc:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a11de:	f1b8 0f00 	cmp.w	r8, #0
 80a11e2:	d005      	beq.n	80a11f0 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a11e4:	6833      	ldr	r3, [r6, #0]
 80a11e6:	4630      	mov	r0, r6
 80a11e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a11ea:	4798      	blx	r3
 80a11ec:	4638      	mov	r0, r7
 80a11ee:	e000      	b.n	80a11f2 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a11f0:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a11f2:	b00a      	add	sp, #40	; 0x28
 80a11f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a11f8:	080a2937 	.word	0x080a2937
 80a11fc:	080a2930 	.word	0x080a2930

080a1200 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1200:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1202:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1204:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1206:	6818      	ldr	r0, [r3, #0]
 80a1208:	f7ff fcfc 	bl	80a0c04 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a120c:	b908      	cbnz	r0, 80a1212 <_ZN9TCPClient6statusEv+0x12>
 80a120e:	2000      	movs	r0, #0
 80a1210:	bd10      	pop	{r4, pc}
 80a1212:	6920      	ldr	r0, [r4, #16]
 80a1214:	f001 f840 	bl	80a2298 <_ZN5spark12NetworkClass4fromEm>
 80a1218:	6803      	ldr	r3, [r0, #0]
 80a121a:	68db      	ldr	r3, [r3, #12]
 80a121c:	4798      	blx	r3
 80a121e:	2800      	cmp	r0, #0
 80a1220:	d0f5      	beq.n	80a120e <_ZN9TCPClient6statusEv+0xe>
 80a1222:	6963      	ldr	r3, [r4, #20]
 80a1224:	6818      	ldr	r0, [r3, #0]
 80a1226:	f7ff fce5 	bl	80a0bf4 <socket_active_status>
 80a122a:	fab0 f080 	clz	r0, r0
 80a122e:	0940      	lsrs	r0, r0, #5
}
 80a1230:	bd10      	pop	{r4, pc}

080a1232 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a1232:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1236:	2500      	movs	r5, #0
 80a1238:	6045      	str	r5, [r0, #4]
 80a123a:	4604      	mov	r4, r0
 80a123c:	460e      	mov	r6, r1
 80a123e:	4617      	mov	r7, r2
 80a1240:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1242:	f7ff ffdd 	bl	80a1200 <_ZN9TCPClient6statusEv>
 80a1246:	b160      	cbz	r0, 80a1262 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1248:	6960      	ldr	r0, [r4, #20]
 80a124a:	9501      	str	r5, [sp, #4]
 80a124c:	f8cd 8000 	str.w	r8, [sp]
 80a1250:	462b      	mov	r3, r5
 80a1252:	463a      	mov	r2, r7
 80a1254:	4631      	mov	r1, r6
 80a1256:	6800      	ldr	r0, [r0, #0]
 80a1258:	f7ff fd04 	bl	80a0c64 <socket_send_ex>
    if (ret < 0) {
 80a125c:	2800      	cmp	r0, #0
 80a125e:	da03      	bge.n	80a1268 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a1260:	e001      	b.n	80a1266 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1262:	f04f 30ff 	mov.w	r0, #4294967295
 80a1266:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1268:	b002      	add	sp, #8
 80a126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a126e <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a126e:	b538      	push	{r3, r4, r5, lr}
 80a1270:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1272:	f7ff ffc5 	bl	80a1200 <_ZN9TCPClient6statusEv>
 80a1276:	bb00      	cbnz	r0, 80a12ba <_ZN9TCPClient9connectedEv+0x4c>
 80a1278:	6963      	ldr	r3, [r4, #20]
 80a127a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a127e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1282:	4291      	cmp	r1, r2
 80a1284:	d119      	bne.n	80a12ba <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1286:	6818      	ldr	r0, [r3, #0]
 80a1288:	f7ff fcbc 	bl	80a0c04 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a128c:	b128      	cbz	r0, 80a129a <_ZN9TCPClient9connectedEv+0x2c>
 80a128e:	6963      	ldr	r3, [r4, #20]
 80a1290:	6818      	ldr	r0, [r3, #0]
 80a1292:	f7ff fcaf 	bl	80a0bf4 <socket_active_status>
 80a1296:	2801      	cmp	r0, #1
 80a1298:	d001      	beq.n	80a129e <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a129a:	2500      	movs	r5, #0
 80a129c:	e00e      	b.n	80a12bc <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a129e:	6823      	ldr	r3, [r4, #0]
 80a12a0:	4620      	mov	r0, r4
 80a12a2:	691b      	ldr	r3, [r3, #16]
 80a12a4:	4798      	blx	r3
 80a12a6:	2800      	cmp	r0, #0
 80a12a8:	bf14      	ite	ne
 80a12aa:	2501      	movne	r5, #1
 80a12ac:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a12ae:	d105      	bne.n	80a12bc <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a12b0:	6823      	ldr	r3, [r4, #0]
 80a12b2:	4620      	mov	r0, r4
 80a12b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a12b6:	4798      	blx	r3
 80a12b8:	e000      	b.n	80a12bc <_ZN9TCPClient9connectedEv+0x4e>
 80a12ba:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a12bc:	4628      	mov	r0, r5
 80a12be:	bd38      	pop	{r3, r4, r5, pc}

080a12c0 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a12c0:	b508      	push	{r3, lr}
   return (status()!=0);
 80a12c2:	f7ff ff9d 	bl	80a1200 <_ZN9TCPClient6statusEv>
}
 80a12c6:	3000      	adds	r0, #0
 80a12c8:	bf18      	it	ne
 80a12ca:	2001      	movne	r0, #1
 80a12cc:	bd08      	pop	{r3, pc}

080a12ce <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a12ce:	b510      	push	{r4, lr}
 80a12d0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a12d2:	2300      	movs	r3, #0
 80a12d4:	6001      	str	r1, [r0, #0]
 80a12d6:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a12da:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a12de:	3088      	adds	r0, #136	; 0x88
 80a12e0:	f000 fd26 	bl	80a1d30 <_ZN9IPAddressC1Ev>
}
 80a12e4:	4620      	mov	r0, r4
 80a12e6:	bd10      	pop	{r4, pc}

080a12e8 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a12e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a12ec:	b570      	push	{r4, r5, r6, lr}
 80a12ee:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a12f0:	4a14      	ldr	r2, [pc, #80]	; (80a1344 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a12f2:	2300      	movs	r3, #0
 80a12f4:	6043      	str	r3, [r0, #4]
 80a12f6:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a12f8:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a12fa:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a12fc:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a12fe:	20a0      	movs	r0, #160	; 0xa0
 80a1300:	460e      	mov	r6, r1
 80a1302:	f7fe feca 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1306:	4605      	mov	r5, r0
 80a1308:	b110      	cbz	r0, 80a1310 <_ZN9TCPClientC1Em+0x28>
 80a130a:	4631      	mov	r1, r6
 80a130c:	f7ff ffdf 	bl	80a12ce <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1310:	2014      	movs	r0, #20
 80a1312:	f7fe fec2 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1316:	4603      	mov	r3, r0
 80a1318:	b128      	cbz	r0, 80a1326 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a131a:	2201      	movs	r2, #1
 80a131c:	6042      	str	r2, [r0, #4]
 80a131e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1320:	4a09      	ldr	r2, [pc, #36]	; (80a1348 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a1322:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1324:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1326:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1328:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a132a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a132c:	b128      	cbz	r0, 80a133a <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a132e:	6843      	ldr	r3, [r0, #4]
 80a1330:	3b01      	subs	r3, #1
 80a1332:	6043      	str	r3, [r0, #4]
 80a1334:	b90b      	cbnz	r3, 80a133a <_ZN9TCPClientC1Em+0x52>
 80a1336:	f7ff fe1b 	bl	80a0f70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a133a:	4620      	mov	r0, r4
 80a133c:	f7ff fe92 	bl	80a1064 <_ZN9TCPClient12flush_bufferEv>
}
 80a1340:	4620      	mov	r0, r4
 80a1342:	bd70      	pop	{r4, r5, r6, pc}
 80a1344:	080a28ec 	.word	0x080a28ec
 80a1348:	080a28d0 	.word	0x080a28d0

080a134c <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a134c:	b510      	push	{r4, lr}
 80a134e:	4604      	mov	r4, r0
 80a1350:	f7ff fc80 	bl	80a0c54 <socket_handle_invalid>
 80a1354:	4601      	mov	r1, r0
 80a1356:	4620      	mov	r0, r4
 80a1358:	f7ff ffc6 	bl	80a12e8 <_ZN9TCPClientC1Em>
{
}
 80a135c:	4620      	mov	r0, r4
 80a135e:	bd10      	pop	{r4, pc}

080a1360 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a1360:	b510      	push	{r4, lr}
 80a1362:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1364:	6800      	ldr	r0, [r0, #0]
 80a1366:	f7ff fc4d 	bl	80a0c04 <socket_handle_valid>
 80a136a:	b110      	cbz	r0, 80a1372 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a136c:	6820      	ldr	r0, [r4, #0]
 80a136e:	f7ff fc69 	bl	80a0c44 <socket_close>
    }
}
 80a1372:	4620      	mov	r0, r4
 80a1374:	bd10      	pop	{r4, pc}

080a1376 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a1376:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1378:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a137a:	4620      	mov	r0, r4
 80a137c:	f7ff fff0 	bl	80a1360 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a1380:	b124      	cbz	r4, 80a138c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1382:	4620      	mov	r0, r4
 80a1384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1388:	f7fe be8b 	b.w	80a00a2 <_ZdlPv>
 80a138c:	bd10      	pop	{r4, pc}
	...

080a1390 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1394:	461f      	mov	r7, r3
    stop();
 80a1396:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1398:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a139c:	4606      	mov	r6, r0
 80a139e:	460d      	mov	r5, r1
 80a13a0:	4690      	mov	r8, r2
    stop();
 80a13a2:	4798      	blx	r3
    if (Network.ready())
 80a13a4:	4813      	ldr	r0, [pc, #76]	; (80a13f4 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a13a6:	f000 ff2a 	bl	80a21fe <_ZN5spark12NetworkClass5readyEv>
 80a13aa:	b300      	cbz	r0, 80a13ee <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a13ac:	a802      	add	r0, sp, #8
 80a13ae:	f000 fcbf 	bl	80a1d30 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a13b2:	4628      	mov	r0, r5
 80a13b4:	f001 fa43 	bl	80a283e <strlen>
 80a13b8:	2400      	movs	r4, #0
 80a13ba:	b281      	uxth	r1, r0
 80a13bc:	9400      	str	r4, [sp, #0]
 80a13be:	463b      	mov	r3, r7
 80a13c0:	aa03      	add	r2, sp, #12
 80a13c2:	4628      	mov	r0, r5
 80a13c4:	f7ff fc8e 	bl	80a0ce4 <inet_gethostbyname>
 80a13c8:	b980      	cbnz	r0, 80a13ec <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a13ca:	6833      	ldr	r3, [r6, #0]
 80a13cc:	ad09      	add	r5, sp, #36	; 0x24
 80a13ce:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a13d2:	4b09      	ldr	r3, [pc, #36]	; (80a13f8 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a13d4:	ac03      	add	r4, sp, #12
 80a13d6:	9308      	str	r3, [sp, #32]
 80a13d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a13da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a13dc:	6823      	ldr	r3, [r4, #0]
 80a13de:	4642      	mov	r2, r8
 80a13e0:	702b      	strb	r3, [r5, #0]
 80a13e2:	a908      	add	r1, sp, #32
 80a13e4:	463b      	mov	r3, r7
 80a13e6:	4630      	mov	r0, r6
 80a13e8:	47c8      	blx	r9
 80a13ea:	e000      	b.n	80a13ee <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a13ec:	4620      	mov	r0, r4
}
 80a13ee:	b00f      	add	sp, #60	; 0x3c
 80a13f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a13f4:	20000610 	.word	0x20000610
 80a13f8:	080a2a7c 	.word	0x080a2a7c

080a13fc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a13fc:	b510      	push	{r4, lr}
 80a13fe:	4604      	mov	r4, r0
{
	free(buffer);
 80a1400:	6800      	ldr	r0, [r0, #0]
 80a1402:	f7ff fd2b 	bl	80a0e5c <free>
}
 80a1406:	4620      	mov	r0, r4
 80a1408:	bd10      	pop	{r4, pc}

080a140a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a140a:	b510      	push	{r4, lr}
 80a140c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a140e:	6800      	ldr	r0, [r0, #0]
 80a1410:	b108      	cbz	r0, 80a1416 <_ZN6String10invalidateEv+0xc>
 80a1412:	f7ff fd23 	bl	80a0e5c <free>
	buffer = NULL;
 80a1416:	2300      	movs	r3, #0
 80a1418:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a141a:	60a3      	str	r3, [r4, #8]
 80a141c:	6063      	str	r3, [r4, #4]
 80a141e:	bd10      	pop	{r4, pc}

080a1420 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1420:	b538      	push	{r3, r4, r5, lr}
 80a1422:	4604      	mov	r4, r0
 80a1424:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1426:	6800      	ldr	r0, [r0, #0]
 80a1428:	3101      	adds	r1, #1
 80a142a:	f7ff fd1f 	bl	80a0e6c <realloc>
	if (newbuffer) {
 80a142e:	b110      	cbz	r0, 80a1436 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1430:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1434:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1436:	bd38      	pop	{r3, r4, r5, pc}

080a1438 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1438:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a143a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a143c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a143e:	b113      	cbz	r3, 80a1446 <_ZN6String7reserveEj+0xe>
 80a1440:	6843      	ldr	r3, [r0, #4]
 80a1442:	428b      	cmp	r3, r1
 80a1444:	d207      	bcs.n	80a1456 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1446:	4620      	mov	r0, r4
 80a1448:	f7ff ffea 	bl	80a1420 <_ZN6String12changeBufferEj>
 80a144c:	b120      	cbz	r0, 80a1458 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a144e:	68a3      	ldr	r3, [r4, #8]
 80a1450:	b90b      	cbnz	r3, 80a1456 <_ZN6String7reserveEj+0x1e>
 80a1452:	6822      	ldr	r2, [r4, #0]
 80a1454:	7013      	strb	r3, [r2, #0]
 80a1456:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1458:	bd10      	pop	{r4, pc}

080a145a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a145a:	b570      	push	{r4, r5, r6, lr}
 80a145c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a145e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1460:	4604      	mov	r4, r0
 80a1462:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1464:	f7ff ffe8 	bl	80a1438 <_ZN6String7reserveEj>
 80a1468:	b918      	cbnz	r0, 80a1472 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a146a:	4620      	mov	r0, r4
 80a146c:	f7ff ffcd 	bl	80a140a <_ZN6String10invalidateEv>
		return *this;
 80a1470:	e009      	b.n	80a1486 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1472:	462a      	mov	r2, r5
 80a1474:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1476:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1478:	6820      	ldr	r0, [r4, #0]
 80a147a:	f001 f979 	bl	80a2770 <memcpy>
	buffer[len] = 0;
 80a147e:	6822      	ldr	r2, [r4, #0]
 80a1480:	68a3      	ldr	r3, [r4, #8]
 80a1482:	2100      	movs	r1, #0
 80a1484:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1486:	4620      	mov	r0, r4
 80a1488:	bd70      	pop	{r4, r5, r6, pc}

080a148a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a148a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a148c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a148e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1490:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1492:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1494:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1496:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1498:	460d      	mov	r5, r1
 80a149a:	b139      	cbz	r1, 80a14ac <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a149c:	4608      	mov	r0, r1
 80a149e:	f001 f9ce 	bl	80a283e <strlen>
 80a14a2:	4629      	mov	r1, r5
 80a14a4:	4602      	mov	r2, r0
 80a14a6:	4620      	mov	r0, r4
 80a14a8:	f7ff ffd7 	bl	80a145a <_ZN6String4copyEPKcj>
}
 80a14ac:	4620      	mov	r0, r4
 80a14ae:	bd38      	pop	{r3, r4, r5, pc}

080a14b0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a14b0:	b538      	push	{r3, r4, r5, lr}
 80a14b2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a14b4:	460c      	mov	r4, r1
 80a14b6:	b141      	cbz	r1, 80a14ca <_ZN6StringaSEPKc+0x1a>
 80a14b8:	4608      	mov	r0, r1
 80a14ba:	f001 f9c0 	bl	80a283e <strlen>
 80a14be:	4621      	mov	r1, r4
 80a14c0:	4602      	mov	r2, r0
 80a14c2:	4628      	mov	r0, r5
 80a14c4:	f7ff ffc9 	bl	80a145a <_ZN6String4copyEPKcj>
 80a14c8:	e001      	b.n	80a14ce <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a14ca:	f7ff ff9e 	bl	80a140a <_ZN6String10invalidateEv>

	return *this;
}
 80a14ce:	4628      	mov	r0, r5
 80a14d0:	bd38      	pop	{r3, r4, r5, pc}

080a14d2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a14d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14d4:	4606      	mov	r6, r0
 80a14d6:	460d      	mov	r5, r1
 80a14d8:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a14da:	2400      	movs	r4, #0
  while (size--) {
 80a14dc:	42bd      	cmp	r5, r7
 80a14de:	d00c      	beq.n	80a14fa <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a14e0:	6833      	ldr	r3, [r6, #0]
 80a14e2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a14e6:	689b      	ldr	r3, [r3, #8]
 80a14e8:	4630      	mov	r0, r6
 80a14ea:	4798      	blx	r3
     if (chunk>=0)
 80a14ec:	2800      	cmp	r0, #0
 80a14ee:	db01      	blt.n	80a14f4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a14f0:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a14f2:	e7f3      	b.n	80a14dc <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a14f4:	2c00      	cmp	r4, #0
 80a14f6:	bf08      	it	eq
 80a14f8:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a14fa:	4620      	mov	r0, r4
 80a14fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a14fe <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a14fe:	b570      	push	{r4, r5, r6, lr}
 80a1500:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1502:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1504:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1506:	b149      	cbz	r1, 80a151c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1508:	f001 f999 	bl	80a283e <strlen>
 80a150c:	682b      	ldr	r3, [r5, #0]
 80a150e:	4602      	mov	r2, r0
 80a1510:	4621      	mov	r1, r4
 80a1512:	4628      	mov	r0, r5
    }
 80a1514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1518:	68db      	ldr	r3, [r3, #12]
 80a151a:	4718      	bx	r3
    }
 80a151c:	bd70      	pop	{r4, r5, r6, pc}

080a151e <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a151e:	6803      	ldr	r3, [r0, #0]
 80a1520:	689b      	ldr	r3, [r3, #8]
 80a1522:	4718      	bx	r3

080a1524 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1524:	2a01      	cmp	r2, #1
 80a1526:	bf98      	it	ls
 80a1528:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a152a:	b530      	push	{r4, r5, lr}
 80a152c:	460b      	mov	r3, r1
 80a152e:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1530:	2100      	movs	r1, #0
 80a1532:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1536:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a153a:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a153e:	fb05 3312 	mls	r3, r5, r2, r3
 80a1542:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1544:	2b09      	cmp	r3, #9
 80a1546:	bf94      	ite	ls
 80a1548:	3330      	addls	r3, #48	; 0x30
 80a154a:	3337      	addhi	r3, #55	; 0x37
 80a154c:	b2db      	uxtb	r3, r3
 80a154e:	4621      	mov	r1, r4
 80a1550:	f804 3901 	strb.w	r3, [r4], #-1
 80a1554:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1556:	2d00      	cmp	r5, #0
 80a1558:	d1ef      	bne.n	80a153a <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a155a:	f7ff ffd0 	bl	80a14fe <_ZN5Print5writeEPKc>
}
 80a155e:	b00b      	add	sp, #44	; 0x2c
 80a1560:	bd30      	pop	{r4, r5, pc}

080a1562 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1562:	2300      	movs	r3, #0
 80a1564:	461a      	mov	r2, r3
 80a1566:	4619      	mov	r1, r3
 80a1568:	6840      	ldr	r0, [r0, #4]
 80a156a:	f7ff bc1f 	b.w	80a0dac <network_on>

080a156e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a156e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a1570:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1572:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1574:	b17c      	cbz	r4, 80a1596 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1576:	6863      	ldr	r3, [r4, #4]
 80a1578:	3b01      	subs	r3, #1
 80a157a:	6063      	str	r3, [r4, #4]
 80a157c:	b95b      	cbnz	r3, 80a1596 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a157e:	6823      	ldr	r3, [r4, #0]
 80a1580:	4620      	mov	r0, r4
 80a1582:	689b      	ldr	r3, [r3, #8]
 80a1584:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1586:	68a3      	ldr	r3, [r4, #8]
 80a1588:	3b01      	subs	r3, #1
 80a158a:	60a3      	str	r3, [r4, #8]
 80a158c:	b91b      	cbnz	r3, 80a1596 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a158e:	6823      	ldr	r3, [r4, #0]
 80a1590:	4620      	mov	r0, r4
 80a1592:	68db      	ldr	r3, [r3, #12]
 80a1594:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1596:	4628      	mov	r0, r5
 80a1598:	bd38      	pop	{r3, r4, r5, pc}

080a159a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a159a:	680b      	ldr	r3, [r1, #0]
 80a159c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a159e:	b113      	cbz	r3, 80a15a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a15a0:	685a      	ldr	r2, [r3, #4]
 80a15a2:	3201      	adds	r2, #1
 80a15a4:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a15a6:	4770      	bx	lr

080a15a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a15a8:	4a01      	ldr	r2, [pc, #4]	; (80a15b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a15ac:	601a      	str	r2, [r3, #0]
 80a15ae:	4770      	bx	lr
 80a15b0:	080a29c1 	.word	0x080a29c1
 80a15b4:	2000018c 	.word	0x2000018c

080a15b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a15b8:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a15ba:	681a      	ldr	r2, [r3, #0]
 80a15bc:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a15be:	601a      	str	r2, [r3, #0]
 80a15c0:	4770      	bx	lr
 80a15c2:	bf00      	nop
 80a15c4:	20000058 	.word	0x20000058
 80a15c8:	20000190 	.word	0x20000190

080a15cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a15cc:	2100      	movs	r1, #0
 80a15ce:	f7ff bba1 	b.w	80a0d14 <system_delay_ms>

080a15d2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a15d2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a15d4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a15d6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a15d8:	b113      	cbz	r3, 80a15e0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a15da:	2203      	movs	r2, #3
 80a15dc:	4601      	mov	r1, r0
 80a15de:	4798      	blx	r3
    }
 80a15e0:	4620      	mov	r0, r4
 80a15e2:	bd10      	pop	{r4, pc}

080a15e4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a15e4:	b510      	push	{r4, lr}
 80a15e6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a15e8:	f7ff fff3 	bl	80a15d2 <_ZNSt14_Function_baseD1Ev>
 80a15ec:	4620      	mov	r0, r4
 80a15ee:	bd10      	pop	{r4, pc}

080a15f0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a15f0:	b513      	push	{r0, r1, r4, lr}
 80a15f2:	460b      	mov	r3, r1
 80a15f4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a15f6:	c803      	ldmia	r0, {r0, r1}
 80a15f8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a15fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1600:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1604:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1608:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a160c:	b002      	add	sp, #8
 80a160e:	bd10      	pop	{r4, pc}

080a1610 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1610:	4803      	ldr	r0, [pc, #12]	; (80a1620 <_GLOBAL__sub_I_RGB+0x10>)
 80a1612:	2300      	movs	r3, #0
 80a1614:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1616:	4a03      	ldr	r2, [pc, #12]	; (80a1624 <_GLOBAL__sub_I_RGB+0x14>)
 80a1618:	4903      	ldr	r1, [pc, #12]	; (80a1628 <_GLOBAL__sub_I_RGB+0x18>)
 80a161a:	f000 bf2f 	b.w	80a247c <__aeabi_atexit>
 80a161e:	bf00      	nop
 80a1620:	20000194 	.word	0x20000194
 80a1624:	200000c0 	.word	0x200000c0
 80a1628:	080a15e5 	.word	0x080a15e5

080a162c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a162c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a162e:	4b14      	ldr	r3, [pc, #80]	; (80a1680 <serialEventRun+0x54>)
 80a1630:	b133      	cbz	r3, 80a1640 <serialEventRun+0x14>
 80a1632:	f000 fc41 	bl	80a1eb8 <_Z16_fetch_usbserialv>
 80a1636:	6803      	ldr	r3, [r0, #0]
 80a1638:	691b      	ldr	r3, [r3, #16]
 80a163a:	4798      	blx	r3
 80a163c:	2800      	cmp	r0, #0
 80a163e:	dc16      	bgt.n	80a166e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1640:	4b10      	ldr	r3, [pc, #64]	; (80a1684 <serialEventRun+0x58>)
 80a1642:	b133      	cbz	r3, 80a1652 <serialEventRun+0x26>
 80a1644:	f000 fcf6 	bl	80a2034 <_Z22__fetch_global_Serial1v>
 80a1648:	6803      	ldr	r3, [r0, #0]
 80a164a:	691b      	ldr	r3, [r3, #16]
 80a164c:	4798      	blx	r3
 80a164e:	2800      	cmp	r0, #0
 80a1650:	dc10      	bgt.n	80a1674 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1652:	4b0d      	ldr	r3, [pc, #52]	; (80a1688 <serialEventRun+0x5c>)
 80a1654:	b10b      	cbz	r3, 80a165a <serialEventRun+0x2e>
 80a1656:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a165a:	4b0c      	ldr	r3, [pc, #48]	; (80a168c <serialEventRun+0x60>)
 80a165c:	b17b      	cbz	r3, 80a167e <serialEventRun+0x52>
 80a165e:	f000 fc67 	bl	80a1f30 <_Z17_fetch_usbserial1v>
 80a1662:	6803      	ldr	r3, [r0, #0]
 80a1664:	691b      	ldr	r3, [r3, #16]
 80a1666:	4798      	blx	r3
 80a1668:	2800      	cmp	r0, #0
 80a166a:	dc06      	bgt.n	80a167a <serialEventRun+0x4e>
 80a166c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a166e:	f3af 8000 	nop.w
 80a1672:	e7e5      	b.n	80a1640 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1674:	f3af 8000 	nop.w
 80a1678:	e7eb      	b.n	80a1652 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a167a:	f3af 8000 	nop.w
 80a167e:	bd08      	pop	{r3, pc}
	...

080a1690 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1690:	b508      	push	{r3, lr}
	serialEventRun();
 80a1692:	f7ff ffcb 	bl	80a162c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1696:	f7ff fa1b 	bl	80a0ad0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a169a:	4b01      	ldr	r3, [pc, #4]	; (80a16a0 <_post_loop+0x10>)
 80a169c:	6018      	str	r0, [r3, #0]
 80a169e:	bd08      	pop	{r3, pc}
 80a16a0:	20000628 	.word	0x20000628

080a16a4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a16a4:	4802      	ldr	r0, [pc, #8]	; (80a16b0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a16a6:	4a03      	ldr	r2, [pc, #12]	; (80a16b4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a16a8:	4903      	ldr	r1, [pc, #12]	; (80a16b8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a16aa:	1a12      	subs	r2, r2, r0
 80a16ac:	f001 b860 	b.w	80a2770 <memcpy>
 80a16b0:	40024000 	.word	0x40024000
 80a16b4:	40024004 	.word	0x40024004
 80a16b8:	080a2c20 	.word	0x080a2c20

080a16bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a16bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a16be:	2300      	movs	r3, #0
 80a16c0:	9300      	str	r3, [sp, #0]
 80a16c2:	461a      	mov	r2, r3
 80a16c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a16c8:	f7ff fb46 	bl	80a0d58 <system_ctrl_set_result>
}
 80a16cc:	b003      	add	sp, #12
 80a16ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a16d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a16d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a16d6:	8843      	ldrh	r3, [r0, #2]
 80a16d8:	2b0a      	cmp	r3, #10
 80a16da:	d008      	beq.n	80a16ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a16dc:	2b50      	cmp	r3, #80	; 0x50
 80a16de:	d109      	bne.n	80a16f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a16e0:	4b09      	ldr	r3, [pc, #36]	; (80a1708 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a16e2:	681b      	ldr	r3, [r3, #0]
 80a16e4:	b13b      	cbz	r3, 80a16f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a16e6:	b003      	add	sp, #12
 80a16e8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a16ec:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a16ee:	f7ff ffe5 	bl	80a16bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a16f2:	e006      	b.n	80a1702 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a16f4:	2300      	movs	r3, #0
 80a16f6:	9300      	str	r3, [sp, #0]
 80a16f8:	461a      	mov	r2, r3
 80a16fa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a16fe:	f7ff fb2b 	bl	80a0d58 <system_ctrl_set_result>
        break;
    }
}
 80a1702:	b003      	add	sp, #12
 80a1704:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1708:	200001a4 	.word	0x200001a4

080a170c <module_user_init_hook>:

void module_user_init_hook()
{
 80a170c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a170e:	4c10      	ldr	r4, [pc, #64]	; (80a1750 <module_user_init_hook+0x44>)
 80a1710:	4d10      	ldr	r5, [pc, #64]	; (80a1754 <module_user_init_hook+0x48>)
 80a1712:	6823      	ldr	r3, [r4, #0]
 80a1714:	42ab      	cmp	r3, r5
 80a1716:	4b10      	ldr	r3, [pc, #64]	; (80a1758 <module_user_init_hook+0x4c>)
 80a1718:	bf0c      	ite	eq
 80a171a:	2201      	moveq	r2, #1
 80a171c:	2200      	movne	r2, #0
 80a171e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1720:	d002      	beq.n	80a1728 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1722:	f7ff ffbf 	bl	80a16a4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1726:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1728:	f7ff f9ca 	bl	80a0ac0 <HAL_RNG_GetRandomNumber>
 80a172c:	4604      	mov	r4, r0
    srand(seed);
 80a172e:	f001 f833 	bl	80a2798 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1732:	4b0a      	ldr	r3, [pc, #40]	; (80a175c <module_user_init_hook+0x50>)
 80a1734:	b113      	cbz	r3, 80a173c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1736:	4620      	mov	r0, r4
 80a1738:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a173c:	2100      	movs	r1, #0
 80a173e:	4807      	ldr	r0, [pc, #28]	; (80a175c <module_user_init_hook+0x50>)
 80a1740:	f7ff fb7c 	bl	80a0e3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1748:	2100      	movs	r1, #0
 80a174a:	4805      	ldr	r0, [pc, #20]	; (80a1760 <module_user_init_hook+0x54>)
 80a174c:	f7ff bafa 	b.w	80a0d44 <system_ctrl_set_app_request_handler>
 80a1750:	40024000 	.word	0x40024000
 80a1754:	9a271c1e 	.word	0x9a271c1e
 80a1758:	200001a8 	.word	0x200001a8
 80a175c:	00000000 	.word	0x00000000
 80a1760:	080a16d5 	.word	0x080a16d5

080a1764 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1764:	4770      	bx	lr

080a1766 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1766:	2000      	movs	r0, #0
 80a1768:	4770      	bx	lr

080a176a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a176a:	b510      	push	{r4, lr}
 80a176c:	4604      	mov	r4, r0
 80a176e:	2110      	movs	r1, #16
 80a1770:	f000 fe92 	bl	80a2498 <_ZdlPvj>
 80a1774:	4620      	mov	r0, r4
 80a1776:	bd10      	pop	{r4, pc}

080a1778 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1778:	b508      	push	{r3, lr}
      { delete this; }
 80a177a:	b108      	cbz	r0, 80a1780 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a177c:	f7ff fff5 	bl	80a176a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1780:	bd08      	pop	{r3, pc}

080a1782 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1782:	2200      	movs	r2, #0
 80a1784:	6002      	str	r2, [r0, #0]
 80a1786:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a178a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a178c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a178e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a1792:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1794:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1796:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1798:	680c      	ldr	r4, [r1, #0]
 80a179a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a179c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a179e:	bd10      	pop	{r4, pc}

080a17a0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a17a0:	b510      	push	{r4, lr}
 80a17a2:	4604      	mov	r4, r0
    free((void*)msg_);
 80a17a4:	6800      	ldr	r0, [r0, #0]
 80a17a6:	f7ff fb59 	bl	80a0e5c <free>
}
 80a17aa:	4620      	mov	r0, r4
 80a17ac:	bd10      	pop	{r4, pc}

080a17ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a17ae:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a17b0:	68c4      	ldr	r4, [r0, #12]
 80a17b2:	b1f4      	cbz	r4, 80a17f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a17b4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a17b6:	2b02      	cmp	r3, #2
 80a17b8:	d103      	bne.n	80a17c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a17ba:	f104 000c 	add.w	r0, r4, #12
 80a17be:	f7ff ffef 	bl	80a17a0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a17c2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a17c4:	b135      	cbz	r5, 80a17d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a17c6:	4628      	mov	r0, r5
 80a17c8:	f7ff ff03 	bl	80a15d2 <_ZNSt14_Function_baseD1Ev>
 80a17cc:	2110      	movs	r1, #16
 80a17ce:	4628      	mov	r0, r5
 80a17d0:	f000 fe62 	bl	80a2498 <_ZdlPvj>
 80a17d4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a17d6:	b135      	cbz	r5, 80a17e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a17d8:	4628      	mov	r0, r5
 80a17da:	f7ff fefa 	bl	80a15d2 <_ZNSt14_Function_baseD1Ev>
 80a17de:	2110      	movs	r1, #16
 80a17e0:	4628      	mov	r0, r5
 80a17e2:	f000 fe59 	bl	80a2498 <_ZdlPvj>
 80a17e6:	4620      	mov	r0, r4
 80a17e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a17ec:	2114      	movs	r1, #20
 80a17ee:	f000 be53 	b.w	80a2498 <_ZdlPvj>
 80a17f2:	bd38      	pop	{r3, r4, r5, pc}

080a17f4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a17f4:	b513      	push	{r0, r1, r4, lr}
 80a17f6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a17f8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a17fc:	2300      	movs	r3, #0
 80a17fe:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1800:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1802:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1804:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1806:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1808:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a180a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a180c:	f7ff feaf 	bl	80a156e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1810:	4620      	mov	r0, r4
 80a1812:	b002      	add	sp, #8
 80a1814:	bd10      	pop	{r4, pc}

080a1816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1818:	460c      	mov	r4, r1
 80a181a:	4606      	mov	r6, r0
 80a181c:	460f      	mov	r7, r1
 80a181e:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1822:	ad02      	add	r5, sp, #8
 80a1824:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1828:	4621      	mov	r1, r4
 80a182a:	a801      	add	r0, sp, #4
 80a182c:	f7ff feb5 	bl	80a159a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1830:	4629      	mov	r1, r5
 80a1832:	4630      	mov	r0, r6
 80a1834:	f7ff ffde 	bl	80a17f4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1838:	a801      	add	r0, sp, #4
 80a183a:	f7ff fe98 	bl	80a156e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a183e:	4620      	mov	r0, r4
 80a1840:	f7ff fe95 	bl	80a156e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1844:	4638      	mov	r0, r7
 80a1846:	2108      	movs	r1, #8
 80a1848:	f000 fe26 	bl	80a2498 <_ZdlPvj>
        return p;
    }
 80a184c:	4630      	mov	r0, r6
 80a184e:	b003      	add	sp, #12
 80a1850:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a1854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1854:	b538      	push	{r3, r4, r5, lr}
 80a1856:	2300      	movs	r3, #0
 80a1858:	4604      	mov	r4, r0
 80a185a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a185c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a185e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1860:	f7fe fc1b 	bl	80a009a <_Znwj>
 80a1864:	b128      	cbz	r0, 80a1872 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1866:	2301      	movs	r3, #1
 80a1868:	6043      	str	r3, [r0, #4]
 80a186a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a186c:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a186e:	60c5      	str	r5, [r0, #12]
 80a1870:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1872:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1874:	4620      	mov	r0, r4
 80a1876:	bd38      	pop	{r3, r4, r5, pc}
 80a1878:	080a2a60 	.word	0x080a2a60

080a187c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a187c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a187e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1880:	b90a      	cbnz	r2, 80a1886 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1882:	f000 fe1c 	bl	80a24be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1886:	68c3      	ldr	r3, [r0, #12]
    }
 80a1888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a188c:	4718      	bx	r3

080a188e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a188e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1890:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1892:	f100 0110 	add.w	r1, r0, #16
 80a1896:	f7ff fff1 	bl	80a187c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a189a:	bd08      	pop	{r3, pc}

080a189c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a189c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a189e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a18a0:	b90a      	cbnz	r2, 80a18a6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a18a2:	f000 fe0c 	bl	80a24be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18a6:	68c3      	ldr	r3, [r0, #12]
    }
 80a18a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18ac:	4718      	bx	r3

080a18ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a18ae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a18b0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a18b2:	f100 0110 	add.w	r1, r0, #16
 80a18b6:	f7ff fff1 	bl	80a189c <_ZNKSt8functionIFvRKbEEclES1_>
 80a18ba:	bd08      	pop	{r3, pc}

080a18bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a18bc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a18be:	2300      	movs	r3, #0
 80a18c0:	6083      	str	r3, [r0, #8]
 80a18c2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a18c4:	4604      	mov	r4, r0
 80a18c6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a18c8:	b12b      	cbz	r3, 80a18d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a18ca:	2202      	movs	r2, #2
 80a18cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a18ce:	68eb      	ldr	r3, [r5, #12]
 80a18d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a18d2:	68ab      	ldr	r3, [r5, #8]
 80a18d4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a18d6:	4620      	mov	r0, r4
 80a18d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a18dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a18dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a18de:	b089      	sub	sp, #36	; 0x24
 80a18e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a18e2:	4668      	mov	r0, sp
 80a18e4:	f7ff ff4d 	bl	80a1782 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a18e8:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a18ec:	2300      	movs	r3, #0
 80a18ee:	f88d 3008 	strb.w	r3, [sp, #8]
 80a18f2:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a18f6:	2b00      	cmp	r3, #0
 80a18f8:	d103      	bne.n	80a1902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a18fa:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a18fe:	2900      	cmp	r1, #0
 80a1900:	d1f7      	bne.n	80a18f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a1902:	d002      	beq.n	80a190a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a1904:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1908:	e063      	b.n	80a19d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a190a:	f114 050c 	adds.w	r5, r4, #12
 80a190e:	d003      	beq.n	80a1918 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a1910:	4669      	mov	r1, sp
 80a1912:	4628      	mov	r0, r5
 80a1914:	f7ff ff35 	bl	80a1782 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1918:	f3bf 8f5f 	dmb	sy
 80a191c:	2301      	movs	r3, #1
 80a191e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1920:	f3bf 8f5f 	dmb	sy
 80a1924:	f104 0308 	add.w	r3, r4, #8
 80a1928:	2000      	movs	r0, #0
 80a192a:	e853 6f00 	ldrex	r6, [r3]
 80a192e:	e843 0200 	strex	r2, r0, [r3]
 80a1932:	2a00      	cmp	r2, #0
 80a1934:	d1f9      	bne.n	80a192a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a1936:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a193a:	2e00      	cmp	r6, #0
 80a193c:	d049      	beq.n	80a19d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a193e:	f7ff f9f1 	bl	80a0d24 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1942:	b120      	cbz	r0, 80a194e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1944:	4629      	mov	r1, r5
 80a1946:	4630      	mov	r0, r6
 80a1948:	f7ff ff98 	bl	80a187c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a194c:	e03a      	b.n	80a19c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a194e:	4631      	mov	r1, r6
 80a1950:	a802      	add	r0, sp, #8
 80a1952:	f7ff ffb3 	bl	80a18bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1956:	68e0      	ldr	r0, [r4, #12]
 80a1958:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a195c:	b108      	cbz	r0, 80a1962 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a195e:	f000 ff53 	bl	80a2808 <strdup>
 80a1962:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1964:	2010      	movs	r0, #16
 80a1966:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a196a:	f7fe fb96 	bl	80a009a <_Znwj>
 80a196e:	4605      	mov	r5, r0
 80a1970:	b1e8      	cbz	r0, 80a19ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1972:	2700      	movs	r7, #0
 80a1974:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1976:	2018      	movs	r0, #24
 80a1978:	f7fe fb8f 	bl	80a009a <_Znwj>
 80a197c:	4604      	mov	r4, r0
 80a197e:	b188      	cbz	r0, 80a19a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1980:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1982:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1984:	a802      	add	r0, sp, #8
 80a1986:	f7ff fe33 	bl	80a15f0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a198a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a198c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a198e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1990:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1992:	9204      	str	r2, [sp, #16]
 80a1994:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1996:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1998:	60e3      	str	r3, [r4, #12]
 80a199a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a199e:	9205      	str	r2, [sp, #20]
 80a19a0:	f7ff feef 	bl	80a1782 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a19a4:	4b0d      	ldr	r3, [pc, #52]	; (80a19dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19a6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a19a8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a19aa:	4b0d      	ldr	r3, [pc, #52]	; (80a19e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a19ac:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a19ae:	a806      	add	r0, sp, #24
 80a19b0:	f7ff fef6 	bl	80a17a0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a19b4:	a802      	add	r0, sp, #8
 80a19b6:	f7ff fe0c 	bl	80a15d2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a19ba:	2200      	movs	r2, #0
 80a19bc:	4629      	mov	r1, r5
 80a19be:	4809      	ldr	r0, [pc, #36]	; (80a19e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a19c0:	f7ff f9b8 	bl	80a0d34 <application_thread_invoke>
 80a19c4:	4630      	mov	r0, r6
 80a19c6:	f7ff fe04 	bl	80a15d2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a19ca:	2110      	movs	r1, #16
 80a19cc:	4630      	mov	r0, r6
 80a19ce:	f000 fd63 	bl	80a2498 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a19d2:	4668      	mov	r0, sp
 80a19d4:	f7ff fee4 	bl	80a17a0 <_ZN8particle5ErrorD1Ev>
    }
 80a19d8:	b009      	add	sp, #36	; 0x24
 80a19da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a19dc:	080a188f 	.word	0x080a188f
 80a19e0:	080a1b05 	.word	0x080a1b05
 80a19e4:	080a2081 	.word	0x080a2081

080a19e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a19e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a19ec:	b08b      	sub	sp, #44	; 0x2c
 80a19ee:	4606      	mov	r6, r0
 80a19f0:	460f      	mov	r7, r1
 80a19f2:	4690      	mov	r8, r2
 80a19f4:	4699      	mov	r9, r3
 80a19f6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a19fa:	f7ff fa07 	bl	80a0e0c <spark_cloud_flag_connected>
 80a19fe:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a1a00:	4683      	mov	fp, r0
 80a1a02:	bb30      	cbnz	r0, 80a1a52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1a04:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1a08:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1a0a:	a905      	add	r1, sp, #20
 80a1a0c:	4628      	mov	r0, r5
 80a1a0e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1a12:	f7ff feb6 	bl	80a1782 <_ZN8particle5ErrorC1EOS0_>
 80a1a16:	2014      	movs	r0, #20
 80a1a18:	f7fe fb3f 	bl	80a009a <_Znwj>
 80a1a1c:	4604      	mov	r4, r0
 80a1a1e:	b158      	cbz	r0, 80a1a38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1a20:	2302      	movs	r3, #2
 80a1a22:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1a24:	2301      	movs	r3, #1
 80a1a26:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1a28:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1a2c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a1a30:	4629      	mov	r1, r5
 80a1a32:	300c      	adds	r0, #12
 80a1a34:	f7ff fea5 	bl	80a1782 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1a38:	4630      	mov	r0, r6
 80a1a3a:	4621      	mov	r1, r4
 80a1a3c:	f840 4b04 	str.w	r4, [r0], #4
 80a1a40:	f7ff ff08 	bl	80a1854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1a44:	4628      	mov	r0, r5
 80a1a46:	f7ff feab 	bl	80a17a0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1a4a:	a805      	add	r0, sp, #20
 80a1a4c:	f7ff fea8 	bl	80a17a0 <_ZN8particle5ErrorD1Ev>
 80a1a50:	e052      	b.n	80a1af8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1a52:	2400      	movs	r4, #0
 80a1a54:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1a56:	2014      	movs	r0, #20
 80a1a58:	606c      	str	r4, [r5, #4]
 80a1a5a:	60ac      	str	r4, [r5, #8]
 80a1a5c:	9307      	str	r3, [sp, #28]
 80a1a5e:	f7fe fb1c 	bl	80a009a <_Znwj>
 80a1a62:	4601      	mov	r1, r0
 80a1a64:	b118      	cbz	r0, 80a1a6e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a1a66:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1a68:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1a6a:	6044      	str	r4, [r0, #4]
 80a1a6c:	6084      	str	r4, [r0, #8]
 80a1a6e:	a804      	add	r0, sp, #16
 80a1a70:	9103      	str	r1, [sp, #12]
 80a1a72:	f7ff feef 	bl	80a1854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1a76:	4b22      	ldr	r3, [pc, #136]	; (80a1b00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1a78:	2008      	movs	r0, #8
 80a1a7a:	9308      	str	r3, [sp, #32]
 80a1a7c:	f7fe fb0d 	bl	80a009a <_Znwj>
 80a1a80:	4604      	mov	r4, r0
 80a1a82:	b128      	cbz	r0, 80a1a90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1a84:	9b03      	ldr	r3, [sp, #12]
 80a1a86:	a904      	add	r1, sp, #16
 80a1a88:	f840 3b04 	str.w	r3, [r0], #4
 80a1a8c:	f7ff fd85 	bl	80a159a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a90:	9500      	str	r5, [sp, #0]
 80a1a92:	fa5f f38a 	uxtb.w	r3, sl
 80a1a96:	464a      	mov	r2, r9
 80a1a98:	4641      	mov	r1, r8
 80a1a9a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1a9c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a9e:	f7ff f9bd 	bl	80a0e1c <spark_send_event>
 80a1aa2:	b920      	cbnz	r0, 80a1aae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1aa4:	9b03      	ldr	r3, [sp, #12]
 80a1aa6:	785b      	ldrb	r3, [r3, #1]
 80a1aa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1aac:	b183      	cbz	r3, 80a1ad0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1aae:	9b03      	ldr	r3, [sp, #12]
 80a1ab0:	a904      	add	r1, sp, #16
 80a1ab2:	a806      	add	r0, sp, #24
 80a1ab4:	9305      	str	r3, [sp, #20]
 80a1ab6:	f7ff fd70 	bl	80a159a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1aba:	a905      	add	r1, sp, #20
 80a1abc:	4630      	mov	r0, r6
 80a1abe:	f7ff fe99 	bl	80a17f4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1ac2:	a806      	add	r0, sp, #24
 80a1ac4:	f7ff fd53 	bl	80a156e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ac8:	a804      	add	r0, sp, #16
 80a1aca:	f7ff fd50 	bl	80a156e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ace:	e013      	b.n	80a1af8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1ad0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1ad4:	a905      	add	r1, sp, #20
 80a1ad6:	a803      	add	r0, sp, #12
 80a1ad8:	9205      	str	r2, [sp, #20]
 80a1ada:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1ade:	f7ff fefd 	bl	80a18dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1ae2:	a805      	add	r0, sp, #20
 80a1ae4:	f7ff fe5c 	bl	80a17a0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1ae8:	a805      	add	r0, sp, #20
 80a1aea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1aec:	f7ff fe93 	bl	80a1816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1af0:	a806      	add	r0, sp, #24
 80a1af2:	f7ff fd3c 	bl	80a156e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1af6:	e7da      	b.n	80a1aae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a1af8:	4630      	mov	r0, r6
 80a1afa:	b00b      	add	sp, #44	; 0x2c
 80a1afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1b00:	080a1c75 	.word	0x080a1c75

080a1b04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b04:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b08:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b0a:	d006      	beq.n	80a1b1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1b0c:	2a03      	cmp	r2, #3
 80a1b0e:	d017      	beq.n	80a1b40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1b10:	2a01      	cmp	r2, #1
 80a1b12:	d122      	bne.n	80a1b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1b14:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1b16:	6003      	str	r3, [r0, #0]
	      break;
 80a1b18:	e01f      	b.n	80a1b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b1a:	2018      	movs	r0, #24
 80a1b1c:	680e      	ldr	r6, [r1, #0]
 80a1b1e:	f7fe fabc 	bl	80a009a <_Znwj>
 80a1b22:	4605      	mov	r5, r0
 80a1b24:	b150      	cbz	r0, 80a1b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1b26:	4631      	mov	r1, r6
 80a1b28:	f7ff fec8 	bl	80a18bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1b2c:	6930      	ldr	r0, [r6, #16]
 80a1b2e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1b32:	b108      	cbz	r0, 80a1b38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1b34:	f000 fe68 	bl	80a2808 <strdup>
 80a1b38:	6128      	str	r0, [r5, #16]
 80a1b3a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b3c:	6025      	str	r5, [r4, #0]
 80a1b3e:	e00c      	b.n	80a1b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b40:	6804      	ldr	r4, [r0, #0]
 80a1b42:	b154      	cbz	r4, 80a1b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1b44:	f104 0010 	add.w	r0, r4, #16
 80a1b48:	f7ff fe2a 	bl	80a17a0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1b4c:	4620      	mov	r0, r4
 80a1b4e:	f7ff fd40 	bl	80a15d2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b52:	2118      	movs	r1, #24
 80a1b54:	4620      	mov	r0, r4
 80a1b56:	f000 fc9f 	bl	80a2498 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1b5a:	2000      	movs	r0, #0
 80a1b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b5e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1b5e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1b60:	2300      	movs	r3, #0
 80a1b62:	6083      	str	r3, [r0, #8]
 80a1b64:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1b66:	4604      	mov	r4, r0
 80a1b68:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1b6a:	b12b      	cbz	r3, 80a1b78 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1b6c:	2202      	movs	r2, #2
 80a1b6e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1b70:	68eb      	ldr	r3, [r5, #12]
 80a1b72:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1b74:	68ab      	ldr	r3, [r5, #8]
 80a1b76:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1b78:	4620      	mov	r0, r4
 80a1b7a:	bd38      	pop	{r3, r4, r5, pc}

080a1b7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b7c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1b7e:	b570      	push	{r4, r5, r6, lr}
 80a1b80:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b82:	d006      	beq.n	80a1b92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1b84:	2a03      	cmp	r2, #3
 80a1b86:	d011      	beq.n	80a1bac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1b88:	2a01      	cmp	r2, #1
 80a1b8a:	d118      	bne.n	80a1bbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1b8c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1b8e:	6003      	str	r3, [r0, #0]
	      break;
 80a1b90:	e015      	b.n	80a1bbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b92:	2014      	movs	r0, #20
 80a1b94:	680e      	ldr	r6, [r1, #0]
 80a1b96:	f7fe fa80 	bl	80a009a <_Znwj>
 80a1b9a:	4605      	mov	r5, r0
 80a1b9c:	b120      	cbz	r0, 80a1ba8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1b9e:	4631      	mov	r1, r6
 80a1ba0:	f7ff ffdd 	bl	80a1b5e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1ba4:	7c33      	ldrb	r3, [r6, #16]
 80a1ba6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ba8:	6025      	str	r5, [r4, #0]
 80a1baa:	e008      	b.n	80a1bbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1bac:	6804      	ldr	r4, [r0, #0]
 80a1bae:	b134      	cbz	r4, 80a1bbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1bb0:	4620      	mov	r0, r4
 80a1bb2:	f7ff fd0e 	bl	80a15d2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1bb6:	2114      	movs	r1, #20
 80a1bb8:	4620      	mov	r0, r4
 80a1bba:	f000 fc6d 	bl	80a2498 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1bbe:	2000      	movs	r0, #0
 80a1bc0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1bc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1bc6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1bc8:	f3bf 8f5f 	dmb	sy
 80a1bcc:	b087      	sub	sp, #28
 80a1bce:	2300      	movs	r3, #0
 80a1bd0:	e850 6f00 	ldrex	r6, [r0]
 80a1bd4:	e840 3200 	strex	r2, r3, [r0]
 80a1bd8:	2a00      	cmp	r2, #0
 80a1bda:	d1f9      	bne.n	80a1bd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1bdc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1be0:	2e00      	cmp	r6, #0
 80a1be2:	d03f      	beq.n	80a1c64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1be4:	4618      	mov	r0, r3
 80a1be6:	f7ff f89d 	bl	80a0d24 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1bea:	4607      	mov	r7, r0
 80a1bec:	b120      	cbz	r0, 80a1bf8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1bee:	4621      	mov	r1, r4
 80a1bf0:	4630      	mov	r0, r6
 80a1bf2:	f7ff fe53 	bl	80a189c <_ZNKSt8functionIFvRKbEEclES1_>
 80a1bf6:	e02e      	b.n	80a1c56 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1bf8:	4631      	mov	r1, r6
 80a1bfa:	a801      	add	r0, sp, #4
 80a1bfc:	f7ff ffaf 	bl	80a1b5e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1c00:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1c02:	2010      	movs	r0, #16
 80a1c04:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1c08:	f7fe fa47 	bl	80a009a <_Znwj>
 80a1c0c:	4605      	mov	r5, r0
 80a1c0e:	b1d0      	cbz	r0, 80a1c46 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c10:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c12:	2014      	movs	r0, #20
 80a1c14:	f7fe fa41 	bl	80a009a <_Znwj>
 80a1c18:	4604      	mov	r4, r0
 80a1c1a:	b178      	cbz	r0, 80a1c3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c1c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1c1e:	4601      	mov	r1, r0
 80a1c20:	a801      	add	r0, sp, #4
 80a1c22:	f7ff fce5 	bl	80a15f0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c26:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1c28:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c2a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c2c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1c2e:	9203      	str	r2, [sp, #12]
 80a1c30:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c32:	60e3      	str	r3, [r4, #12]
 80a1c34:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1c38:	9204      	str	r2, [sp, #16]
 80a1c3a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c3c:	4b0a      	ldr	r3, [pc, #40]	; (80a1c68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c3e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c40:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1c42:	4b0a      	ldr	r3, [pc, #40]	; (80a1c6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1c44:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1c46:	a801      	add	r0, sp, #4
 80a1c48:	f7ff fcc3 	bl	80a15d2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1c4c:	2200      	movs	r2, #0
 80a1c4e:	4629      	mov	r1, r5
 80a1c50:	4807      	ldr	r0, [pc, #28]	; (80a1c70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1c52:	f7ff f86f 	bl	80a0d34 <application_thread_invoke>
 80a1c56:	4630      	mov	r0, r6
 80a1c58:	f7ff fcbb 	bl	80a15d2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1c5c:	2110      	movs	r1, #16
 80a1c5e:	4630      	mov	r0, r6
 80a1c60:	f000 fc1a 	bl	80a2498 <_ZdlPvj>
        }
    }
 80a1c64:	b007      	add	sp, #28
 80a1c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1c68:	080a18af 	.word	0x080a18af
 80a1c6c:	080a1b7d 	.word	0x080a1b7d
 80a1c70:	080a2081 	.word	0x080a2081

080a1c74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1c74:	b530      	push	{r4, r5, lr}
 80a1c76:	4604      	mov	r4, r0
 80a1c78:	b085      	sub	sp, #20
 80a1c7a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1c7c:	4668      	mov	r0, sp
 80a1c7e:	4611      	mov	r1, r2
 80a1c80:	f7ff fdc9 	bl	80a1816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1c84:	b17c      	cbz	r4, 80a1ca6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1c86:	b224      	sxth	r4, r4
 80a1c88:	4628      	mov	r0, r5
 80a1c8a:	b10d      	cbz	r5, 80a1c90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1c8c:	f000 fdbc 	bl	80a2808 <strdup>
 80a1c90:	9002      	str	r0, [sp, #8]
 80a1c92:	a902      	add	r1, sp, #8
 80a1c94:	4668      	mov	r0, sp
 80a1c96:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1c9a:	f7ff fe1f 	bl	80a18dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1c9e:	a802      	add	r0, sp, #8
 80a1ca0:	f7ff fd7e 	bl	80a17a0 <_ZN8particle5ErrorD1Ev>
 80a1ca4:	e01d      	b.n	80a1ce2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1ca6:	f04f 0201 	mov.w	r2, #1
 80a1caa:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1cac:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1cb0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1cb4:	42a3      	cmp	r3, r4
 80a1cb6:	d103      	bne.n	80a1cc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1cb8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1cbc:	2900      	cmp	r1, #0
 80a1cbe:	d1f7      	bne.n	80a1cb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1cc0:	d002      	beq.n	80a1cc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1cc2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1cc6:	e00c      	b.n	80a1ce2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1cc8:	f110 010c 	adds.w	r1, r0, #12
 80a1ccc:	f04f 0301 	mov.w	r3, #1
 80a1cd0:	bf18      	it	ne
 80a1cd2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1cd4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1cd8:	3004      	adds	r0, #4
 80a1cda:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1cde:	f7ff ff71 	bl	80a1bc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1ce2:	a801      	add	r0, sp, #4
 80a1ce4:	f7ff fc43 	bl	80a156e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1ce8:	b005      	add	sp, #20
 80a1cea:	bd30      	pop	{r4, r5, pc}

080a1cec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1cec:	4770      	bx	lr

080a1cee <_ZN9IPAddressD0Ev>:
 80a1cee:	b510      	push	{r4, lr}
 80a1cf0:	4604      	mov	r4, r0
 80a1cf2:	2118      	movs	r1, #24
 80a1cf4:	f000 fbd0 	bl	80a2498 <_ZdlPvj>
 80a1cf8:	4620      	mov	r0, r4
 80a1cfa:	bd10      	pop	{r4, pc}

080a1cfc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1cfe:	460f      	mov	r7, r1
 80a1d00:	f100 0608 	add.w	r6, r0, #8
 80a1d04:	1d05      	adds	r5, r0, #4
 80a1d06:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1d08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1d0c:	220a      	movs	r2, #10
 80a1d0e:	4638      	mov	r0, r7
 80a1d10:	f7ff fc08 	bl	80a1524 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1d14:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1d16:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1d18:	d007      	beq.n	80a1d2a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1d1a:	2c00      	cmp	r4, #0
 80a1d1c:	d0f4      	beq.n	80a1d08 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1d1e:	212e      	movs	r1, #46	; 0x2e
 80a1d20:	4638      	mov	r0, r7
 80a1d22:	f7ff fbfc 	bl	80a151e <_ZN5Print5printEc>
 80a1d26:	4404      	add	r4, r0
 80a1d28:	e7ee      	b.n	80a1d08 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1d2a:	4620      	mov	r0, r4
 80a1d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1d30 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1d30:	b510      	push	{r4, lr}
 80a1d32:	4604      	mov	r4, r0
 80a1d34:	4b04      	ldr	r3, [pc, #16]	; (80a1d48 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1d36:	2211      	movs	r2, #17
 80a1d38:	f840 3b04 	str.w	r3, [r0], #4
 80a1d3c:	2100      	movs	r1, #0
 80a1d3e:	f000 fd22 	bl	80a2786 <memset>
{
    clear();
}
 80a1d42:	4620      	mov	r0, r4
 80a1d44:	bd10      	pop	{r4, pc}
 80a1d46:	bf00      	nop
 80a1d48:	080a2a7c 	.word	0x080a2a7c

080a1d4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1d4c:	4603      	mov	r3, r0
 80a1d4e:	4a07      	ldr	r2, [pc, #28]	; (80a1d6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1d50:	b510      	push	{r4, lr}
 80a1d52:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1d56:	f101 0210 	add.w	r2, r1, #16
 80a1d5a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1d5e:	4291      	cmp	r1, r2
 80a1d60:	f843 4b04 	str.w	r4, [r3], #4
 80a1d64:	d1f9      	bne.n	80a1d5a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1d66:	780a      	ldrb	r2, [r1, #0]
 80a1d68:	701a      	strb	r2, [r3, #0]
}
 80a1d6a:	bd10      	pop	{r4, pc}
 80a1d6c:	080a2a7c 	.word	0x080a2a7c

080a1d70 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1d70:	4a02      	ldr	r2, [pc, #8]	; (80a1d7c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1d72:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1d74:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1d76:	2204      	movs	r2, #4
 80a1d78:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1d7a:	4770      	bx	lr
 80a1d7c:	080a2a7c 	.word	0x080a2a7c

080a1d80 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1d80:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1d82:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1d86:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1d8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1d8e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1d92:	2304      	movs	r3, #4
 80a1d94:	6041      	str	r1, [r0, #4]
 80a1d96:	7503      	strb	r3, [r0, #20]
 80a1d98:	bd10      	pop	{r4, pc}
	...

080a1d9c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1d9e:	4d04      	ldr	r5, [pc, #16]	; (80a1db0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1da0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1da2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1da6:	9500      	str	r5, [sp, #0]
 80a1da8:	f7ff ffea 	bl	80a1d80 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1dac:	b003      	add	sp, #12
 80a1dae:	bd30      	pop	{r4, r5, pc}
 80a1db0:	080a2a7c 	.word	0x080a2a7c

080a1db4 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1db6:	780d      	ldrb	r5, [r1, #0]
 80a1db8:	788b      	ldrb	r3, [r1, #2]
 80a1dba:	784a      	ldrb	r2, [r1, #1]
 80a1dbc:	78c9      	ldrb	r1, [r1, #3]
 80a1dbe:	9100      	str	r1, [sp, #0]
 80a1dc0:	4629      	mov	r1, r5
 80a1dc2:	f7ff ffdd 	bl	80a1d80 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a1dc6:	b003      	add	sp, #12
 80a1dc8:	bd30      	pop	{r4, r5, pc}
	...

080a1dcc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a1dcc:	b510      	push	{r4, lr}
 80a1dce:	4604      	mov	r4, r0
 80a1dd0:	4b02      	ldr	r3, [pc, #8]	; (80a1ddc <_ZN9IPAddressC1EPKh+0x10>)
 80a1dd2:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a1dd4:	f7ff ffee 	bl	80a1db4 <_ZN9IPAddressaSEPKh>
}
 80a1dd8:	4620      	mov	r0, r4
 80a1dda:	bd10      	pop	{r4, pc}
 80a1ddc:	080a2a7c 	.word	0x080a2a7c

080a1de0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1de0:	7441      	strb	r1, [r0, #17]
 80a1de2:	4770      	bx	lr

080a1de4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1de4:	4770      	bx	lr

080a1de6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1de6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1de8:	2100      	movs	r1, #0
 80a1dea:	7c00      	ldrb	r0, [r0, #16]
 80a1dec:	f7fe ff5a 	bl	80a0ca4 <HAL_USB_USART_Receive_Data>
}
 80a1df0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1df4:	bf28      	it	cs
 80a1df6:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1dfa:	bd08      	pop	{r3, pc}

080a1dfc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1dfc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1dfe:	2101      	movs	r1, #1
 80a1e00:	7c00      	ldrb	r0, [r0, #16]
 80a1e02:	f7fe ff4f 	bl	80a0ca4 <HAL_USB_USART_Receive_Data>
}
 80a1e06:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1e0a:	bf28      	it	cs
 80a1e0c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1e10:	bd08      	pop	{r3, pc}

080a1e12 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1e12:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1e14:	7c00      	ldrb	r0, [r0, #16]
 80a1e16:	f7fe ff3d 	bl	80a0c94 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1e1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e1e:	bd08      	pop	{r3, pc}

080a1e20 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1e20:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1e22:	7c00      	ldrb	r0, [r0, #16]
 80a1e24:	f7fe ff2e 	bl	80a0c84 <HAL_USB_USART_Available_Data>
}
 80a1e28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e2c:	bd08      	pop	{r3, pc}

080a1e2e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1e2e:	7c00      	ldrb	r0, [r0, #16]
 80a1e30:	f7fe bf48 	b.w	80a0cc4 <HAL_USB_USART_Flush_Data>

080a1e34 <_ZN9USBSerialD0Ev>:
 80a1e34:	b510      	push	{r4, lr}
 80a1e36:	4604      	mov	r4, r0
 80a1e38:	2114      	movs	r1, #20
 80a1e3a:	f000 fb2d 	bl	80a2498 <_ZdlPvj>
 80a1e3e:	4620      	mov	r0, r4
 80a1e40:	bd10      	pop	{r4, pc}

080a1e42 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1e42:	b538      	push	{r3, r4, r5, lr}
 80a1e44:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1e46:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1e48:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1e4a:	f7fe ff23 	bl	80a0c94 <HAL_USB_USART_Available_Data_For_Write>
 80a1e4e:	2800      	cmp	r0, #0
 80a1e50:	dc01      	bgt.n	80a1e56 <_ZN9USBSerial5writeEh+0x14>
 80a1e52:	7c60      	ldrb	r0, [r4, #17]
 80a1e54:	b128      	cbz	r0, 80a1e62 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1e56:	4629      	mov	r1, r5
 80a1e58:	7c20      	ldrb	r0, [r4, #16]
 80a1e5a:	f7fe ff2b 	bl	80a0cb4 <HAL_USB_USART_Send_Data>
 80a1e5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1e62:	bd38      	pop	{r3, r4, r5, pc}

080a1e64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1e64:	b510      	push	{r4, lr}
 80a1e66:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1e68:	2300      	movs	r3, #0
 80a1e6a:	6063      	str	r3, [r4, #4]
 80a1e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e70:	60a3      	str	r3, [r4, #8]
 80a1e72:	4b05      	ldr	r3, [pc, #20]	; (80a1e88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1e74:	4608      	mov	r0, r1
 80a1e76:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1e78:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1e7a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1e7c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1e7e:	4611      	mov	r1, r2
 80a1e80:	f7fe fef8 	bl	80a0c74 <HAL_USB_USART_Init>
}
 80a1e84:	4620      	mov	r0, r4
 80a1e86:	bd10      	pop	{r4, pc}
 80a1e88:	080a2a90 	.word	0x080a2a90

080a1e8c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1e8c:	b510      	push	{r4, lr}
 80a1e8e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1e90:	2214      	movs	r2, #20
 80a1e92:	2100      	movs	r1, #0
 80a1e94:	f000 fc77 	bl	80a2786 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1e98:	4b05      	ldr	r3, [pc, #20]	; (80a1eb0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1e9a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1e9c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1e9e:	4b05      	ldr	r3, [pc, #20]	; (80a1eb4 <_Z19acquireSerialBufferv+0x28>)
 80a1ea0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1ea2:	f240 1301 	movw	r3, #257	; 0x101
 80a1ea6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1ea8:	2381      	movs	r3, #129	; 0x81
 80a1eaa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1eac:	bd10      	pop	{r4, pc}
 80a1eae:	bf00      	nop
 80a1eb0:	20000231 	.word	0x20000231
 80a1eb4:	200001b0 	.word	0x200001b0

080a1eb8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1eb8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1eba:	4d0e      	ldr	r5, [pc, #56]	; (80a1ef4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1ebc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1ebe:	a801      	add	r0, sp, #4
 80a1ec0:	f7ff ffe4 	bl	80a1e8c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ec4:	6829      	ldr	r1, [r5, #0]
 80a1ec6:	f011 0401 	ands.w	r4, r1, #1
 80a1eca:	d110      	bne.n	80a1eee <_Z16_fetch_usbserialv+0x36>
 80a1ecc:	4628      	mov	r0, r5
 80a1ece:	f7fe f8ec 	bl	80a00aa <__cxa_guard_acquire>
 80a1ed2:	b160      	cbz	r0, 80a1eee <_Z16_fetch_usbserialv+0x36>
 80a1ed4:	aa01      	add	r2, sp, #4
 80a1ed6:	4621      	mov	r1, r4
 80a1ed8:	4807      	ldr	r0, [pc, #28]	; (80a1ef8 <_Z16_fetch_usbserialv+0x40>)
 80a1eda:	f7ff ffc3 	bl	80a1e64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1ede:	4628      	mov	r0, r5
 80a1ee0:	f7fe f8e8 	bl	80a00b4 <__cxa_guard_release>
 80a1ee4:	4a05      	ldr	r2, [pc, #20]	; (80a1efc <_Z16_fetch_usbserialv+0x44>)
 80a1ee6:	4906      	ldr	r1, [pc, #24]	; (80a1f00 <_Z16_fetch_usbserialv+0x48>)
 80a1ee8:	4803      	ldr	r0, [pc, #12]	; (80a1ef8 <_Z16_fetch_usbserialv+0x40>)
 80a1eea:	f000 fac7 	bl	80a247c <__aeabi_atexit>
	return _usbserial;
}
 80a1eee:	4802      	ldr	r0, [pc, #8]	; (80a1ef8 <_Z16_fetch_usbserialv+0x40>)
 80a1ef0:	b007      	add	sp, #28
 80a1ef2:	bd30      	pop	{r4, r5, pc}
 80a1ef4:	200001ac 	.word	0x200001ac
 80a1ef8:	20000334 	.word	0x20000334
 80a1efc:	200000c0 	.word	0x200000c0
 80a1f00:	080a1de5 	.word	0x080a1de5

080a1f04 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1f04:	b510      	push	{r4, lr}
 80a1f06:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1f08:	2214      	movs	r2, #20
 80a1f0a:	2100      	movs	r1, #0
 80a1f0c:	f000 fc3b 	bl	80a2786 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1f10:	4b05      	ldr	r3, [pc, #20]	; (80a1f28 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1f12:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1f14:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1f16:	4b05      	ldr	r3, [pc, #20]	; (80a1f2c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1f18:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1f1a:	f240 1301 	movw	r3, #257	; 0x101
 80a1f1e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1f20:	2381      	movs	r3, #129	; 0x81
 80a1f22:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1f24:	bd10      	pop	{r4, pc}
 80a1f26:	bf00      	nop
 80a1f28:	200003e4 	.word	0x200003e4
 80a1f2c:	2000034c 	.word	0x2000034c

080a1f30 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1f30:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1f32:	4c0e      	ldr	r4, [pc, #56]	; (80a1f6c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1f34:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1f36:	a801      	add	r0, sp, #4
 80a1f38:	f7ff ffe4 	bl	80a1f04 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1f3c:	6823      	ldr	r3, [r4, #0]
 80a1f3e:	07db      	lsls	r3, r3, #31
 80a1f40:	d410      	bmi.n	80a1f64 <_Z17_fetch_usbserial1v+0x34>
 80a1f42:	4620      	mov	r0, r4
 80a1f44:	f7fe f8b1 	bl	80a00aa <__cxa_guard_acquire>
 80a1f48:	b160      	cbz	r0, 80a1f64 <_Z17_fetch_usbserial1v+0x34>
 80a1f4a:	aa01      	add	r2, sp, #4
 80a1f4c:	2101      	movs	r1, #1
 80a1f4e:	4808      	ldr	r0, [pc, #32]	; (80a1f70 <_Z17_fetch_usbserial1v+0x40>)
 80a1f50:	f7ff ff88 	bl	80a1e64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1f54:	4620      	mov	r0, r4
 80a1f56:	f7fe f8ad 	bl	80a00b4 <__cxa_guard_release>
 80a1f5a:	4a06      	ldr	r2, [pc, #24]	; (80a1f74 <_Z17_fetch_usbserial1v+0x44>)
 80a1f5c:	4906      	ldr	r1, [pc, #24]	; (80a1f78 <_Z17_fetch_usbserial1v+0x48>)
 80a1f5e:	4804      	ldr	r0, [pc, #16]	; (80a1f70 <_Z17_fetch_usbserial1v+0x40>)
 80a1f60:	f000 fa8c 	bl	80a247c <__aeabi_atexit>
  return _usbserial1;
}
 80a1f64:	4802      	ldr	r0, [pc, #8]	; (80a1f70 <_Z17_fetch_usbserial1v+0x40>)
 80a1f66:	b006      	add	sp, #24
 80a1f68:	bd10      	pop	{r4, pc}
 80a1f6a:	bf00      	nop
 80a1f6c:	20000348 	.word	0x20000348
 80a1f70:	200003d0 	.word	0x200003d0
 80a1f74:	200000c0 	.word	0x200000c0
 80a1f78:	080a1de5 	.word	0x080a1de5

080a1f7c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1f7c:	4770      	bx	lr

080a1f7e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f7e:	7441      	strb	r1, [r0, #17]
 80a1f80:	4770      	bx	lr

080a1f82 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1f82:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1f84:	7c00      	ldrb	r0, [r0, #16]
 80a1f86:	f7fe fdf3 	bl	80a0b70 <HAL_USART_Available_Data_For_Write>
}
 80a1f8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f8e:	bd08      	pop	{r3, pc}

080a1f90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1f90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1f92:	7c00      	ldrb	r0, [r0, #16]
 80a1f94:	f7fe fdc4 	bl	80a0b20 <HAL_USART_Available_Data>
}
 80a1f98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f9c:	bd08      	pop	{r3, pc}

080a1f9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1f9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1fa0:	7c00      	ldrb	r0, [r0, #16]
 80a1fa2:	f7fe fdcd 	bl	80a0b40 <HAL_USART_Peek_Data>
}
 80a1fa6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1faa:	bf28      	it	cs
 80a1fac:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1fb0:	bd08      	pop	{r3, pc}

080a1fb2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1fb2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1fb4:	7c00      	ldrb	r0, [r0, #16]
 80a1fb6:	f7fe fdbb 	bl	80a0b30 <HAL_USART_Read_Data>
}
 80a1fba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1fbe:	bf28      	it	cs
 80a1fc0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1fc4:	bd08      	pop	{r3, pc}

080a1fc6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1fc6:	7c00      	ldrb	r0, [r0, #16]
 80a1fc8:	f7fe bdc2 	b.w	80a0b50 <HAL_USART_Flush_Data>

080a1fcc <_ZN11USARTSerialD0Ev>:
 80a1fcc:	b510      	push	{r4, lr}
 80a1fce:	4604      	mov	r4, r0
 80a1fd0:	2114      	movs	r1, #20
 80a1fd2:	f000 fa61 	bl	80a2498 <_ZdlPvj>
 80a1fd6:	4620      	mov	r0, r4
 80a1fd8:	bd10      	pop	{r4, pc}

080a1fda <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1fda:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1fdc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1fde:	4604      	mov	r4, r0
 80a1fe0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1fe2:	b925      	cbnz	r5, 80a1fee <_ZN11USARTSerial5writeEh+0x14>
 80a1fe4:	7c00      	ldrb	r0, [r0, #16]
 80a1fe6:	f7fe fdc3 	bl	80a0b70 <HAL_USART_Available_Data_For_Write>
 80a1fea:	2800      	cmp	r0, #0
 80a1fec:	dd05      	ble.n	80a1ffa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1fee:	4631      	mov	r1, r6
 80a1ff0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1ff6:	f7fe bd8b 	b.w	80a0b10 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1ffa:	4628      	mov	r0, r5
 80a1ffc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2000 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2000:	b510      	push	{r4, lr}
 80a2002:	4604      	mov	r4, r0
 80a2004:	4608      	mov	r0, r1
 80a2006:	4611      	mov	r1, r2
 80a2008:	2200      	movs	r2, #0
 80a200a:	6062      	str	r2, [r4, #4]
 80a200c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2010:	60a2      	str	r2, [r4, #8]
 80a2012:	4a05      	ldr	r2, [pc, #20]	; (80a2028 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2014:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2016:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2018:	2201      	movs	r2, #1
 80a201a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a201c:	461a      	mov	r2, r3
 80a201e:	f7fe fd6f 	bl	80a0b00 <HAL_USART_Init>
}
 80a2022:	4620      	mov	r0, r4
 80a2024:	bd10      	pop	{r4, pc}
 80a2026:	bf00      	nop
 80a2028:	080a2ac0 	.word	0x080a2ac0

080a202c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a202c:	7c00      	ldrb	r0, [r0, #16]
 80a202e:	f7fe bd97 	b.w	80a0b60 <HAL_USART_Is_Enabled>
	...

080a2034 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2034:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2036:	4d0c      	ldr	r5, [pc, #48]	; (80a2068 <_Z22__fetch_global_Serial1v+0x34>)
 80a2038:	6829      	ldr	r1, [r5, #0]
 80a203a:	f011 0401 	ands.w	r4, r1, #1
 80a203e:	d111      	bne.n	80a2064 <_Z22__fetch_global_Serial1v+0x30>
 80a2040:	4628      	mov	r0, r5
 80a2042:	f7fe f832 	bl	80a00aa <__cxa_guard_acquire>
 80a2046:	b168      	cbz	r0, 80a2064 <_Z22__fetch_global_Serial1v+0x30>
 80a2048:	4a08      	ldr	r2, [pc, #32]	; (80a206c <_Z22__fetch_global_Serial1v+0x38>)
 80a204a:	4621      	mov	r1, r4
 80a204c:	4b08      	ldr	r3, [pc, #32]	; (80a2070 <_Z22__fetch_global_Serial1v+0x3c>)
 80a204e:	4809      	ldr	r0, [pc, #36]	; (80a2074 <_Z22__fetch_global_Serial1v+0x40>)
 80a2050:	f7ff ffd6 	bl	80a2000 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2054:	4628      	mov	r0, r5
 80a2056:	f7fe f82d 	bl	80a00b4 <__cxa_guard_release>
 80a205a:	4a07      	ldr	r2, [pc, #28]	; (80a2078 <_Z22__fetch_global_Serial1v+0x44>)
 80a205c:	4907      	ldr	r1, [pc, #28]	; (80a207c <_Z22__fetch_global_Serial1v+0x48>)
 80a205e:	4805      	ldr	r0, [pc, #20]	; (80a2074 <_Z22__fetch_global_Serial1v+0x40>)
 80a2060:	f000 fa0c 	bl	80a247c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2064:	4803      	ldr	r0, [pc, #12]	; (80a2074 <_Z22__fetch_global_Serial1v+0x40>)
 80a2066:	bd38      	pop	{r3, r4, r5, pc}
 80a2068:	20000580 	.word	0x20000580
 80a206c:	20000584 	.word	0x20000584
 80a2070:	200004fc 	.word	0x200004fc
 80a2074:	200004e8 	.word	0x200004e8
 80a2078:	200000c0 	.word	0x200000c0
 80a207c:	080a1f7d 	.word	0x080a1f7d

080a2080 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2080:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2082:	6883      	ldr	r3, [r0, #8]
 80a2084:	4604      	mov	r4, r0
 80a2086:	b90b      	cbnz	r3, 80a208c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2088:	f000 fa19 	bl	80a24be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a208c:	68c3      	ldr	r3, [r0, #12]
 80a208e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2090:	68a3      	ldr	r3, [r4, #8]
 80a2092:	b11b      	cbz	r3, 80a209c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2094:	2203      	movs	r2, #3
 80a2096:	4621      	mov	r1, r4
 80a2098:	4620      	mov	r0, r4
 80a209a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a209c:	4620      	mov	r0, r4
}
 80a209e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a20a2:	2110      	movs	r1, #16
 80a20a4:	f000 b9f8 	b.w	80a2498 <_ZdlPvj>

080a20a8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a20a8:	4770      	bx	lr

080a20aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a20aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20ac:	4606      	mov	r6, r0
 80a20ae:	4615      	mov	r5, r2
 80a20b0:	460c      	mov	r4, r1
 80a20b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a20b4:	42bc      	cmp	r4, r7
 80a20b6:	d006      	beq.n	80a20c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a20b8:	6833      	ldr	r3, [r6, #0]
 80a20ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a20be:	689b      	ldr	r3, [r3, #8]
 80a20c0:	4630      	mov	r0, r6
 80a20c2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a20c4:	e7f6      	b.n	80a20b4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a20c6:	4628      	mov	r0, r5
 80a20c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a20ca <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a20ca:	2200      	movs	r2, #0
 80a20cc:	7c00      	ldrb	r0, [r0, #16]
 80a20ce:	f7fe bd57 	b.w	80a0b80 <HAL_I2C_Write_Data>

080a20d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a20d2:	2100      	movs	r1, #0
 80a20d4:	7c00      	ldrb	r0, [r0, #16]
 80a20d6:	f7fe bd5b 	b.w	80a0b90 <HAL_I2C_Available_Data>

080a20da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a20da:	2100      	movs	r1, #0
 80a20dc:	7c00      	ldrb	r0, [r0, #16]
 80a20de:	f7fe bd5f 	b.w	80a0ba0 <HAL_I2C_Read_Data>

080a20e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a20e2:	2100      	movs	r1, #0
 80a20e4:	7c00      	ldrb	r0, [r0, #16]
 80a20e6:	f7fe bd63 	b.w	80a0bb0 <HAL_I2C_Peek_Data>

080a20ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a20ea:	2100      	movs	r1, #0
 80a20ec:	7c00      	ldrb	r0, [r0, #16]
 80a20ee:	f7fe bd67 	b.w	80a0bc0 <HAL_I2C_Flush_Data>

080a20f2 <_ZN7TwoWireD0Ev>:
 80a20f2:	b510      	push	{r4, lr}
 80a20f4:	4604      	mov	r4, r0
 80a20f6:	2114      	movs	r1, #20
 80a20f8:	f000 f9ce 	bl	80a2498 <_ZdlPvj>
 80a20fc:	4620      	mov	r0, r4
 80a20fe:	bd10      	pop	{r4, pc}

080a2100 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2100:	b510      	push	{r4, lr}
 80a2102:	4604      	mov	r4, r0
 80a2104:	2300      	movs	r3, #0
 80a2106:	6063      	str	r3, [r4, #4]
 80a2108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a210c:	60a3      	str	r3, [r4, #8]
 80a210e:	4b04      	ldr	r3, [pc, #16]	; (80a2120 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a2110:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2112:	4608      	mov	r0, r1
 80a2114:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a2116:	4611      	mov	r1, r2
 80a2118:	f7fe fd62 	bl	80a0be0 <HAL_I2C_Init>
}
 80a211c:	4620      	mov	r0, r4
 80a211e:	bd10      	pop	{r4, pc}
 80a2120:	080a2af0 	.word	0x080a2af0

080a2124 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2124:	2100      	movs	r1, #0
 80a2126:	7c00      	ldrb	r0, [r0, #16]
 80a2128:	f7fe bd52 	b.w	80a0bd0 <HAL_I2C_Is_Enabled>

080a212c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a212c:	2200      	movs	r2, #0
 80a212e:	4611      	mov	r1, r2
 80a2130:	6840      	ldr	r0, [r0, #4]
 80a2132:	f7fe be33 	b.w	80a0d9c <network_ready>

080a2136 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2136:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2138:	4616      	mov	r6, r2
 80a213a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a213c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a213e:	460f      	mov	r7, r1
 80a2140:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2142:	2100      	movs	r1, #0
 80a2144:	a803      	add	r0, sp, #12
 80a2146:	f000 fb1e 	bl	80a2786 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a214a:	4630      	mov	r0, r6
 80a214c:	f000 fb77 	bl	80a283e <strlen>
 80a2150:	2500      	movs	r5, #0
 80a2152:	9500      	str	r5, [sp, #0]
 80a2154:	b281      	uxth	r1, r0
 80a2156:	687b      	ldr	r3, [r7, #4]
 80a2158:	aa03      	add	r2, sp, #12
 80a215a:	4630      	mov	r0, r6
 80a215c:	f7fe fdc2 	bl	80a0ce4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2160:	b120      	cbz	r0, 80a216c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2162:	4629      	mov	r1, r5
 80a2164:	4620      	mov	r0, r4
 80a2166:	f7ff fe03 	bl	80a1d70 <_ZN9IPAddressC1Em>
 80a216a:	e003      	b.n	80a2174 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a216c:	a903      	add	r1, sp, #12
 80a216e:	4620      	mov	r0, r4
 80a2170:	f7ff fdec 	bl	80a1d4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2174:	4620      	mov	r0, r4
 80a2176:	b009      	add	sp, #36	; 0x24
 80a2178:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a217a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a217a:	2200      	movs	r2, #0
 80a217c:	4611      	mov	r1, r2
 80a217e:	6840      	ldr	r0, [r0, #4]
 80a2180:	f7fe be2c 	b.w	80a0ddc <network_listening>

080a2184 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2184:	2200      	movs	r2, #0
 80a2186:	4611      	mov	r1, r2
 80a2188:	6840      	ldr	r0, [r0, #4]
 80a218a:	f7fe be37 	b.w	80a0dfc <network_get_listen_timeout>

080a218e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a218e:	2200      	movs	r2, #0
 80a2190:	6840      	ldr	r0, [r0, #4]
 80a2192:	f7fe be2b 	b.w	80a0dec <network_set_listen_timeout>

080a2196 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2196:	2200      	movs	r2, #0
 80a2198:	f081 0101 	eor.w	r1, r1, #1
 80a219c:	6840      	ldr	r0, [r0, #4]
 80a219e:	f7fe be15 	b.w	80a0dcc <network_listen>

080a21a2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a21a2:	2300      	movs	r3, #0
 80a21a4:	461a      	mov	r2, r3
 80a21a6:	4619      	mov	r1, r3
 80a21a8:	6840      	ldr	r0, [r0, #4]
 80a21aa:	f7fe be07 	b.w	80a0dbc <network_off>

080a21ae <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a21ae:	2200      	movs	r2, #0
 80a21b0:	4611      	mov	r1, r2
 80a21b2:	6840      	ldr	r0, [r0, #4]
 80a21b4:	f7fe bde2 	b.w	80a0d7c <network_connecting>

080a21b8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a21b8:	2200      	movs	r2, #0
 80a21ba:	2102      	movs	r1, #2
 80a21bc:	6840      	ldr	r0, [r0, #4]
 80a21be:	f7fe bde5 	b.w	80a0d8c <network_disconnect>

080a21c2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a21c2:	2300      	movs	r3, #0
 80a21c4:	461a      	mov	r2, r3
 80a21c6:	6840      	ldr	r0, [r0, #4]
 80a21c8:	f7fe bdd0 	b.w	80a0d6c <network_connect>

080a21cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a21cc:	4b02      	ldr	r3, [pc, #8]	; (80a21d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a21ce:	2204      	movs	r2, #4
 80a21d0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a21d2:	4a02      	ldr	r2, [pc, #8]	; (80a21dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a21d4:	601a      	str	r2, [r3, #0]
 80a21d6:	4770      	bx	lr
 80a21d8:	20000608 	.word	0x20000608
 80a21dc:	080a2b18 	.word	0x080a2b18

080a21e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a21e0:	2300      	movs	r3, #0
 80a21e2:	461a      	mov	r2, r3
 80a21e4:	6840      	ldr	r0, [r0, #4]
 80a21e6:	f7fe bdc1 	b.w	80a0d6c <network_connect>

080a21ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a21ea:	2200      	movs	r2, #0
 80a21ec:	2102      	movs	r1, #2
 80a21ee:	6840      	ldr	r0, [r0, #4]
 80a21f0:	f7fe bdcc 	b.w	80a0d8c <network_disconnect>

080a21f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a21f4:	2200      	movs	r2, #0
 80a21f6:	4611      	mov	r1, r2
 80a21f8:	6840      	ldr	r0, [r0, #4]
 80a21fa:	f7fe bdbf 	b.w	80a0d7c <network_connecting>

080a21fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a21fe:	2200      	movs	r2, #0
 80a2200:	4611      	mov	r1, r2
 80a2202:	6840      	ldr	r0, [r0, #4]
 80a2204:	f7fe bdca 	b.w	80a0d9c <network_ready>

080a2208 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2208:	2300      	movs	r3, #0
 80a220a:	461a      	mov	r2, r3
 80a220c:	4619      	mov	r1, r3
 80a220e:	6840      	ldr	r0, [r0, #4]
 80a2210:	f7fe bdcc 	b.w	80a0dac <network_on>

080a2214 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2214:	2300      	movs	r3, #0
 80a2216:	461a      	mov	r2, r3
 80a2218:	4619      	mov	r1, r3
 80a221a:	6840      	ldr	r0, [r0, #4]
 80a221c:	f7fe bdce 	b.w	80a0dbc <network_off>

080a2220 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2220:	2200      	movs	r2, #0
 80a2222:	f081 0101 	eor.w	r1, r1, #1
 80a2226:	6840      	ldr	r0, [r0, #4]
 80a2228:	f7fe bdd0 	b.w	80a0dcc <network_listen>

080a222c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a222c:	2200      	movs	r2, #0
 80a222e:	6840      	ldr	r0, [r0, #4]
 80a2230:	f7fe bddc 	b.w	80a0dec <network_set_listen_timeout>

080a2234 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2234:	2200      	movs	r2, #0
 80a2236:	4611      	mov	r1, r2
 80a2238:	6840      	ldr	r0, [r0, #4]
 80a223a:	f7fe bddf 	b.w	80a0dfc <network_get_listen_timeout>

080a223e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a223e:	2200      	movs	r2, #0
 80a2240:	4611      	mov	r1, r2
 80a2242:	6840      	ldr	r0, [r0, #4]
 80a2244:	f7fe bdca 	b.w	80a0ddc <network_listening>

080a2248 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2248:	b570      	push	{r4, r5, r6, lr}
 80a224a:	4616      	mov	r6, r2
 80a224c:	b08e      	sub	sp, #56	; 0x38
 80a224e:	4604      	mov	r4, r0
    IPAddress addr;
 80a2250:	a808      	add	r0, sp, #32
 80a2252:	f7ff fd6d 	bl	80a1d30 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2256:	2211      	movs	r2, #17
 80a2258:	2100      	movs	r1, #0
 80a225a:	a803      	add	r0, sp, #12
 80a225c:	f000 fa93 	bl	80a2786 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2260:	4630      	mov	r0, r6
 80a2262:	f000 faec 	bl	80a283e <strlen>
 80a2266:	2500      	movs	r5, #0
 80a2268:	4b0a      	ldr	r3, [pc, #40]	; (80a2294 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a226a:	9500      	str	r5, [sp, #0]
 80a226c:	b281      	uxth	r1, r0
 80a226e:	685b      	ldr	r3, [r3, #4]
 80a2270:	aa03      	add	r2, sp, #12
 80a2272:	4630      	mov	r0, r6
 80a2274:	f7fe fd36 	bl	80a0ce4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2278:	b120      	cbz	r0, 80a2284 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a227a:	4629      	mov	r1, r5
 80a227c:	4620      	mov	r0, r4
 80a227e:	f7ff fd77 	bl	80a1d70 <_ZN9IPAddressC1Em>
 80a2282:	e003      	b.n	80a228c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2284:	a903      	add	r1, sp, #12
 80a2286:	4620      	mov	r0, r4
 80a2288:	f7ff fd60 	bl	80a1d4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a228c:	4620      	mov	r0, r4
 80a228e:	b00e      	add	sp, #56	; 0x38
 80a2290:	bd70      	pop	{r4, r5, r6, pc}
 80a2292:	bf00      	nop
 80a2294:	20000608 	.word	0x20000608

080a2298 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a2298:	4b03      	ldr	r3, [pc, #12]	; (80a22a8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a229a:	4a04      	ldr	r2, [pc, #16]	; (80a22ac <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a229c:	2804      	cmp	r0, #4
 80a229e:	bf0c      	ite	eq
 80a22a0:	4610      	moveq	r0, r2
 80a22a2:	4618      	movne	r0, r3
 80a22a4:	4770      	bx	lr
 80a22a6:	bf00      	nop
 80a22a8:	20000610 	.word	0x20000610
 80a22ac:	20000608 	.word	0x20000608

080a22b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a22b0:	4b02      	ldr	r3, [pc, #8]	; (80a22bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a22b2:	4a03      	ldr	r2, [pc, #12]	; (80a22c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a22b4:	601a      	str	r2, [r3, #0]
 80a22b6:	2200      	movs	r2, #0
 80a22b8:	605a      	str	r2, [r3, #4]
 80a22ba:	4770      	bx	lr
 80a22bc:	20000610 	.word	0x20000610
 80a22c0:	080a2b4c 	.word	0x080a2b4c

080a22c4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a22c4:	b510      	push	{r4, lr}
 80a22c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a22c8:	6880      	ldr	r0, [r0, #8]
 80a22ca:	b108      	cbz	r0, 80a22d0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a22cc:	f7fe fc10 	bl	80a0af0 <os_mutex_recursive_destroy>
 80a22d0:	4620      	mov	r0, r4
 80a22d2:	bd10      	pop	{r4, pc}

080a22d4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a22d4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a22d6:	4e1a      	ldr	r6, [pc, #104]	; (80a2340 <pinAvailable+0x6c>)
 80a22d8:	4604      	mov	r4, r0
 80a22da:	6831      	ldr	r1, [r6, #0]
 80a22dc:	f011 0501 	ands.w	r5, r1, #1
 80a22e0:	d10f      	bne.n	80a2302 <pinAvailable+0x2e>
 80a22e2:	4630      	mov	r0, r6
 80a22e4:	f7fd fee1 	bl	80a00aa <__cxa_guard_acquire>
 80a22e8:	b158      	cbz	r0, 80a2302 <pinAvailable+0x2e>
 80a22ea:	4629      	mov	r1, r5
 80a22ec:	4815      	ldr	r0, [pc, #84]	; (80a2344 <pinAvailable+0x70>)
 80a22ee:	f7fe fdd5 	bl	80a0e9c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a22f2:	4630      	mov	r0, r6
 80a22f4:	f7fd fede 	bl	80a00b4 <__cxa_guard_release>
 80a22f8:	4a13      	ldr	r2, [pc, #76]	; (80a2348 <pinAvailable+0x74>)
 80a22fa:	4914      	ldr	r1, [pc, #80]	; (80a234c <pinAvailable+0x78>)
 80a22fc:	4811      	ldr	r0, [pc, #68]	; (80a2344 <pinAvailable+0x70>)
 80a22fe:	f000 f8bd 	bl	80a247c <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a2302:	4810      	ldr	r0, [pc, #64]	; (80a2344 <pinAvailable+0x70>)
 80a2304:	f7fe fdd9 	bl	80a0eba <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2308:	b128      	cbz	r0, 80a2316 <pinAvailable+0x42>
 80a230a:	f1a4 030d 	sub.w	r3, r4, #13
 80a230e:	2b02      	cmp	r3, #2
 80a2310:	d801      	bhi.n	80a2316 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a2312:	2000      	movs	r0, #0
 80a2314:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2316:	f000 f88b 	bl	80a2430 <_Z19__fetch_global_Wirev>
 80a231a:	f7ff ff03 	bl	80a2124 <_ZN7TwoWire9isEnabledEv>
 80a231e:	b108      	cbz	r0, 80a2324 <pinAvailable+0x50>
 80a2320:	2c01      	cmp	r4, #1
 80a2322:	d9f6      	bls.n	80a2312 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2324:	f7ff fe86 	bl	80a2034 <_Z22__fetch_global_Serial1v>
 80a2328:	f7ff fe80 	bl	80a202c <_ZN11USARTSerial9isEnabledEv>
 80a232c:	b118      	cbz	r0, 80a2336 <pinAvailable+0x62>
 80a232e:	f1a4 0312 	sub.w	r3, r4, #18
 80a2332:	2b01      	cmp	r3, #1
 80a2334:	d9ed      	bls.n	80a2312 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2336:	2c17      	cmp	r4, #23
 80a2338:	bf8c      	ite	hi
 80a233a:	2000      	movhi	r0, #0
 80a233c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a233e:	bd70      	pop	{r4, r5, r6, pc}
 80a2340:	20000618 	.word	0x20000618
 80a2344:	2000061c 	.word	0x2000061c
 80a2348:	200000c0 	.word	0x200000c0
 80a234c:	080a22c5 	.word	0x080a22c5

080a2350 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2350:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2352:	b538      	push	{r3, r4, r5, lr}
 80a2354:	4604      	mov	r4, r0
 80a2356:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2358:	d80a      	bhi.n	80a2370 <pinMode+0x20>
 80a235a:	29ff      	cmp	r1, #255	; 0xff
 80a235c:	d008      	beq.n	80a2370 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a235e:	f7ff ffb9 	bl	80a22d4 <pinAvailable>
 80a2362:	b128      	cbz	r0, 80a2370 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2364:	4629      	mov	r1, r5
 80a2366:	4620      	mov	r0, r4
}
 80a2368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a236c:	f7fe bb78 	b.w	80a0a60 <HAL_Pin_Mode>
 80a2370:	bd38      	pop	{r3, r4, r5, pc}

080a2372 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2372:	b538      	push	{r3, r4, r5, lr}
 80a2374:	4604      	mov	r4, r0
 80a2376:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2378:	f7fe fb7a 	bl	80a0a70 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a237c:	28ff      	cmp	r0, #255	; 0xff
 80a237e:	d010      	beq.n	80a23a2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2380:	2806      	cmp	r0, #6
 80a2382:	d804      	bhi.n	80a238e <digitalWrite+0x1c>
 80a2384:	234d      	movs	r3, #77	; 0x4d
 80a2386:	fa23 f000 	lsr.w	r0, r3, r0
 80a238a:	07c3      	lsls	r3, r0, #31
 80a238c:	d409      	bmi.n	80a23a2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a238e:	4620      	mov	r0, r4
 80a2390:	f7ff ffa0 	bl	80a22d4 <pinAvailable>
 80a2394:	b128      	cbz	r0, 80a23a2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2396:	4629      	mov	r1, r5
 80a2398:	4620      	mov	r0, r4
}
 80a239a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a239e:	f7fe bb6f 	b.w	80a0a80 <HAL_GPIO_Write>
 80a23a2:	bd38      	pop	{r3, r4, r5, pc}

080a23a4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a23a4:	b510      	push	{r4, lr}
 80a23a6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a23a8:	f7fe fb62 	bl	80a0a70 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a23ac:	3804      	subs	r0, #4
 80a23ae:	b2c0      	uxtb	r0, r0
 80a23b0:	2801      	cmp	r0, #1
 80a23b2:	d908      	bls.n	80a23c6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a23b4:	4620      	mov	r0, r4
 80a23b6:	f7ff ff8d 	bl	80a22d4 <pinAvailable>
 80a23ba:	b120      	cbz	r0, 80a23c6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a23bc:	4620      	mov	r0, r4
}
 80a23be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a23c2:	f7fe bb65 	b.w	80a0a90 <HAL_GPIO_Read>
}
 80a23c6:	2000      	movs	r0, #0
 80a23c8:	bd10      	pop	{r4, pc}
	...

080a23cc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a23cc:	b513      	push	{r0, r1, r4, lr}
 80a23ce:	4c08      	ldr	r4, [pc, #32]	; (80a23f0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a23d0:	2300      	movs	r3, #0
 80a23d2:	461a      	mov	r2, r3
 80a23d4:	4619      	mov	r1, r3
 80a23d6:	9300      	str	r3, [sp, #0]
 80a23d8:	4620      	mov	r0, r4
 80a23da:	f7ff fcdf 	bl	80a1d9c <_ZN9IPAddressC1Ehhhh>
 80a23de:	4620      	mov	r0, r4
 80a23e0:	4a04      	ldr	r2, [pc, #16]	; (80a23f4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a23e2:	4905      	ldr	r1, [pc, #20]	; (80a23f8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a23e4:	b002      	add	sp, #8
 80a23e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a23ea:	f000 b847 	b.w	80a247c <__aeabi_atexit>
 80a23ee:	bf00      	nop
 80a23f0:	2000062c 	.word	0x2000062c
 80a23f4:	200000c0 	.word	0x200000c0
 80a23f8:	080a1ced 	.word	0x080a1ced

080a23fc <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a23fc:	b570      	push	{r4, r5, r6, lr}
 80a23fe:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2400:	2514      	movs	r5, #20
 80a2402:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2404:	4e09      	ldr	r6, [pc, #36]	; (80a242c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2406:	2100      	movs	r1, #0
 80a2408:	f000 f9bd 	bl	80a2786 <memset>
 80a240c:	8025      	strh	r5, [r4, #0]
 80a240e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2410:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2412:	60a5      	str	r5, [r4, #8]
 80a2414:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2416:	4628      	mov	r0, r5
 80a2418:	f000 f840 	bl	80a249c <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a241c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a241e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2420:	4628      	mov	r0, r5
 80a2422:	f000 f83b 	bl	80a249c <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2426:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2428:	4620      	mov	r0, r4
 80a242a:	bd70      	pop	{r4, r5, r6, pc}
 80a242c:	080a2b78 	.word	0x080a2b78

080a2430 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2430:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2432:	4d0e      	ldr	r5, [pc, #56]	; (80a246c <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2434:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2436:	6829      	ldr	r1, [r5, #0]
 80a2438:	f011 0401 	ands.w	r4, r1, #1
 80a243c:	d113      	bne.n	80a2466 <_Z19__fetch_global_Wirev+0x36>
 80a243e:	4628      	mov	r0, r5
 80a2440:	f7fd fe33 	bl	80a00aa <__cxa_guard_acquire>
 80a2444:	b178      	cbz	r0, 80a2466 <_Z19__fetch_global_Wirev+0x36>
 80a2446:	a801      	add	r0, sp, #4
 80a2448:	f7ff ffd8 	bl	80a23fc <_Z17acquireWireBufferv>
 80a244c:	aa01      	add	r2, sp, #4
 80a244e:	4621      	mov	r1, r4
 80a2450:	4807      	ldr	r0, [pc, #28]	; (80a2470 <_Z19__fetch_global_Wirev+0x40>)
 80a2452:	f7ff fe55 	bl	80a2100 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a2456:	4628      	mov	r0, r5
 80a2458:	f7fd fe2c 	bl	80a00b4 <__cxa_guard_release>
 80a245c:	4a05      	ldr	r2, [pc, #20]	; (80a2474 <_Z19__fetch_global_Wirev+0x44>)
 80a245e:	4906      	ldr	r1, [pc, #24]	; (80a2478 <_Z19__fetch_global_Wirev+0x48>)
 80a2460:	4803      	ldr	r0, [pc, #12]	; (80a2470 <_Z19__fetch_global_Wirev+0x40>)
 80a2462:	f000 f80b 	bl	80a247c <__aeabi_atexit>
	return wire;
}
 80a2466:	4802      	ldr	r0, [pc, #8]	; (80a2470 <_Z19__fetch_global_Wirev+0x40>)
 80a2468:	b007      	add	sp, #28
 80a246a:	bd30      	pop	{r4, r5, pc}
 80a246c:	20000644 	.word	0x20000644
 80a2470:	20000648 	.word	0x20000648
 80a2474:	200000c0 	.word	0x200000c0
 80a2478:	080a20a9 	.word	0x080a20a9

080a247c <__aeabi_atexit>:
 80a247c:	460b      	mov	r3, r1
 80a247e:	4601      	mov	r1, r0
 80a2480:	4618      	mov	r0, r3
 80a2482:	f000 b967 	b.w	80a2754 <__cxa_atexit>
	...

080a2488 <_ZSt15get_new_handlerv>:
 80a2488:	4b02      	ldr	r3, [pc, #8]	; (80a2494 <_ZSt15get_new_handlerv+0xc>)
 80a248a:	6818      	ldr	r0, [r3, #0]
 80a248c:	f3bf 8f5f 	dmb	sy
 80a2490:	4770      	bx	lr
 80a2492:	bf00      	nop
 80a2494:	2000065c 	.word	0x2000065c

080a2498 <_ZdlPvj>:
 80a2498:	f7fd be03 	b.w	80a00a2 <_ZdlPv>

080a249c <_ZnajRKSt9nothrow_t>:
 80a249c:	f000 b800 	b.w	80a24a0 <_ZnwjRKSt9nothrow_t>

080a24a0 <_ZnwjRKSt9nothrow_t>:
 80a24a0:	b510      	push	{r4, lr}
 80a24a2:	2800      	cmp	r0, #0
 80a24a4:	bf14      	ite	ne
 80a24a6:	4604      	movne	r4, r0
 80a24a8:	2401      	moveq	r4, #1
 80a24aa:	4620      	mov	r0, r4
 80a24ac:	f7fe fcce 	bl	80a0e4c <malloc>
 80a24b0:	b920      	cbnz	r0, 80a24bc <_ZnwjRKSt9nothrow_t+0x1c>
 80a24b2:	f7ff ffe9 	bl	80a2488 <_ZSt15get_new_handlerv>
 80a24b6:	b108      	cbz	r0, 80a24bc <_ZnwjRKSt9nothrow_t+0x1c>
 80a24b8:	4780      	blx	r0
 80a24ba:	e7f6      	b.n	80a24aa <_ZnwjRKSt9nothrow_t+0xa>
 80a24bc:	bd10      	pop	{r4, pc}

080a24be <_ZSt25__throw_bad_function_callv>:
 80a24be:	b508      	push	{r3, lr}
 80a24c0:	f7fe fcdc 	bl	80a0e7c <abort>

080a24c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a24c4:	4b18      	ldr	r3, [pc, #96]	; (80a2528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a24c6:	681a      	ldr	r2, [r3, #0]
 80a24c8:	07d1      	lsls	r1, r2, #31
 80a24ca:	bf5c      	itt	pl
 80a24cc:	2201      	movpl	r2, #1
 80a24ce:	601a      	strpl	r2, [r3, #0]
 80a24d0:	4b16      	ldr	r3, [pc, #88]	; (80a252c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a24d2:	681a      	ldr	r2, [r3, #0]
 80a24d4:	07d2      	lsls	r2, r2, #31
 80a24d6:	bf5c      	itt	pl
 80a24d8:	2201      	movpl	r2, #1
 80a24da:	601a      	strpl	r2, [r3, #0]
 80a24dc:	4b14      	ldr	r3, [pc, #80]	; (80a2530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a24de:	681a      	ldr	r2, [r3, #0]
 80a24e0:	07d0      	lsls	r0, r2, #31
 80a24e2:	bf5c      	itt	pl
 80a24e4:	2201      	movpl	r2, #1
 80a24e6:	601a      	strpl	r2, [r3, #0]
 80a24e8:	4b12      	ldr	r3, [pc, #72]	; (80a2534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a24ea:	681a      	ldr	r2, [r3, #0]
 80a24ec:	07d1      	lsls	r1, r2, #31
 80a24ee:	bf5c      	itt	pl
 80a24f0:	2201      	movpl	r2, #1
 80a24f2:	601a      	strpl	r2, [r3, #0]
 80a24f4:	4b10      	ldr	r3, [pc, #64]	; (80a2538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a24f6:	681a      	ldr	r2, [r3, #0]
 80a24f8:	07d2      	lsls	r2, r2, #31
 80a24fa:	bf5c      	itt	pl
 80a24fc:	2201      	movpl	r2, #1
 80a24fe:	601a      	strpl	r2, [r3, #0]
 80a2500:	4b0e      	ldr	r3, [pc, #56]	; (80a253c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2502:	681a      	ldr	r2, [r3, #0]
 80a2504:	07d0      	lsls	r0, r2, #31
 80a2506:	bf5c      	itt	pl
 80a2508:	2201      	movpl	r2, #1
 80a250a:	601a      	strpl	r2, [r3, #0]
 80a250c:	4b0c      	ldr	r3, [pc, #48]	; (80a2540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a250e:	681a      	ldr	r2, [r3, #0]
 80a2510:	07d1      	lsls	r1, r2, #31
 80a2512:	bf5c      	itt	pl
 80a2514:	2201      	movpl	r2, #1
 80a2516:	601a      	strpl	r2, [r3, #0]
 80a2518:	4b0a      	ldr	r3, [pc, #40]	; (80a2544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a251a:	681a      	ldr	r2, [r3, #0]
 80a251c:	07d2      	lsls	r2, r2, #31
 80a251e:	bf5c      	itt	pl
 80a2520:	2201      	movpl	r2, #1
 80a2522:	601a      	strpl	r2, [r3, #0]
 80a2524:	4770      	bx	lr
 80a2526:	bf00      	nop
 80a2528:	2000067c 	.word	0x2000067c
 80a252c:	20000678 	.word	0x20000678
 80a2530:	20000674 	.word	0x20000674
 80a2534:	20000670 	.word	0x20000670
 80a2538:	2000066c 	.word	0x2000066c
 80a253c:	20000668 	.word	0x20000668
 80a2540:	20000664 	.word	0x20000664
 80a2544:	20000660 	.word	0x20000660

080a2548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2548:	4b24      	ldr	r3, [pc, #144]	; (80a25dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a254a:	681a      	ldr	r2, [r3, #0]
 80a254c:	07d0      	lsls	r0, r2, #31
 80a254e:	bf5c      	itt	pl
 80a2550:	2201      	movpl	r2, #1
 80a2552:	601a      	strpl	r2, [r3, #0]
 80a2554:	4b22      	ldr	r3, [pc, #136]	; (80a25e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2556:	681a      	ldr	r2, [r3, #0]
 80a2558:	07d1      	lsls	r1, r2, #31
 80a255a:	bf5c      	itt	pl
 80a255c:	2201      	movpl	r2, #1
 80a255e:	601a      	strpl	r2, [r3, #0]
 80a2560:	4b20      	ldr	r3, [pc, #128]	; (80a25e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2562:	681a      	ldr	r2, [r3, #0]
 80a2564:	07d2      	lsls	r2, r2, #31
 80a2566:	bf5c      	itt	pl
 80a2568:	2201      	movpl	r2, #1
 80a256a:	601a      	strpl	r2, [r3, #0]
 80a256c:	4b1e      	ldr	r3, [pc, #120]	; (80a25e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a256e:	681a      	ldr	r2, [r3, #0]
 80a2570:	07d0      	lsls	r0, r2, #31
 80a2572:	bf5c      	itt	pl
 80a2574:	2201      	movpl	r2, #1
 80a2576:	601a      	strpl	r2, [r3, #0]
 80a2578:	4b1c      	ldr	r3, [pc, #112]	; (80a25ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a257a:	681a      	ldr	r2, [r3, #0]
 80a257c:	07d1      	lsls	r1, r2, #31
 80a257e:	bf5c      	itt	pl
 80a2580:	2201      	movpl	r2, #1
 80a2582:	601a      	strpl	r2, [r3, #0]
 80a2584:	4b1a      	ldr	r3, [pc, #104]	; (80a25f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2586:	681a      	ldr	r2, [r3, #0]
 80a2588:	07d2      	lsls	r2, r2, #31
 80a258a:	bf5c      	itt	pl
 80a258c:	2201      	movpl	r2, #1
 80a258e:	601a      	strpl	r2, [r3, #0]
 80a2590:	4b18      	ldr	r3, [pc, #96]	; (80a25f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2592:	681a      	ldr	r2, [r3, #0]
 80a2594:	07d0      	lsls	r0, r2, #31
 80a2596:	bf5c      	itt	pl
 80a2598:	2201      	movpl	r2, #1
 80a259a:	601a      	strpl	r2, [r3, #0]
 80a259c:	4b16      	ldr	r3, [pc, #88]	; (80a25f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a259e:	681a      	ldr	r2, [r3, #0]
 80a25a0:	07d1      	lsls	r1, r2, #31
 80a25a2:	bf5c      	itt	pl
 80a25a4:	2201      	movpl	r2, #1
 80a25a6:	601a      	strpl	r2, [r3, #0]
 80a25a8:	4b14      	ldr	r3, [pc, #80]	; (80a25fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a25aa:	681a      	ldr	r2, [r3, #0]
 80a25ac:	07d2      	lsls	r2, r2, #31
 80a25ae:	bf5c      	itt	pl
 80a25b0:	2201      	movpl	r2, #1
 80a25b2:	601a      	strpl	r2, [r3, #0]
 80a25b4:	4b12      	ldr	r3, [pc, #72]	; (80a2600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a25b6:	681a      	ldr	r2, [r3, #0]
 80a25b8:	07d0      	lsls	r0, r2, #31
 80a25ba:	bf5c      	itt	pl
 80a25bc:	2201      	movpl	r2, #1
 80a25be:	601a      	strpl	r2, [r3, #0]
 80a25c0:	4b10      	ldr	r3, [pc, #64]	; (80a2604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a25c2:	681a      	ldr	r2, [r3, #0]
 80a25c4:	07d1      	lsls	r1, r2, #31
 80a25c6:	bf5c      	itt	pl
 80a25c8:	2201      	movpl	r2, #1
 80a25ca:	601a      	strpl	r2, [r3, #0]
 80a25cc:	4b0e      	ldr	r3, [pc, #56]	; (80a2608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a25ce:	681a      	ldr	r2, [r3, #0]
 80a25d0:	07d2      	lsls	r2, r2, #31
 80a25d2:	bf5c      	itt	pl
 80a25d4:	2201      	movpl	r2, #1
 80a25d6:	601a      	strpl	r2, [r3, #0]
 80a25d8:	4770      	bx	lr
 80a25da:	bf00      	nop
 80a25dc:	200006ac 	.word	0x200006ac
 80a25e0:	200006a8 	.word	0x200006a8
 80a25e4:	200006a4 	.word	0x200006a4
 80a25e8:	200006a0 	.word	0x200006a0
 80a25ec:	2000069c 	.word	0x2000069c
 80a25f0:	20000698 	.word	0x20000698
 80a25f4:	20000694 	.word	0x20000694
 80a25f8:	20000690 	.word	0x20000690
 80a25fc:	2000068c 	.word	0x2000068c
 80a2600:	20000688 	.word	0x20000688
 80a2604:	20000684 	.word	0x20000684
 80a2608:	20000680 	.word	0x20000680

080a260c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a260c:	4b24      	ldr	r3, [pc, #144]	; (80a26a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a260e:	681a      	ldr	r2, [r3, #0]
 80a2610:	07d0      	lsls	r0, r2, #31
 80a2612:	bf5c      	itt	pl
 80a2614:	2201      	movpl	r2, #1
 80a2616:	601a      	strpl	r2, [r3, #0]
 80a2618:	4b22      	ldr	r3, [pc, #136]	; (80a26a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a261a:	681a      	ldr	r2, [r3, #0]
 80a261c:	07d1      	lsls	r1, r2, #31
 80a261e:	bf5c      	itt	pl
 80a2620:	2201      	movpl	r2, #1
 80a2622:	601a      	strpl	r2, [r3, #0]
 80a2624:	4b20      	ldr	r3, [pc, #128]	; (80a26a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2626:	681a      	ldr	r2, [r3, #0]
 80a2628:	07d2      	lsls	r2, r2, #31
 80a262a:	bf5c      	itt	pl
 80a262c:	2201      	movpl	r2, #1
 80a262e:	601a      	strpl	r2, [r3, #0]
 80a2630:	4b1e      	ldr	r3, [pc, #120]	; (80a26ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2632:	681a      	ldr	r2, [r3, #0]
 80a2634:	07d0      	lsls	r0, r2, #31
 80a2636:	bf5c      	itt	pl
 80a2638:	2201      	movpl	r2, #1
 80a263a:	601a      	strpl	r2, [r3, #0]
 80a263c:	4b1c      	ldr	r3, [pc, #112]	; (80a26b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a263e:	681a      	ldr	r2, [r3, #0]
 80a2640:	07d1      	lsls	r1, r2, #31
 80a2642:	bf5c      	itt	pl
 80a2644:	2201      	movpl	r2, #1
 80a2646:	601a      	strpl	r2, [r3, #0]
 80a2648:	4b1a      	ldr	r3, [pc, #104]	; (80a26b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a264a:	681a      	ldr	r2, [r3, #0]
 80a264c:	07d2      	lsls	r2, r2, #31
 80a264e:	bf5c      	itt	pl
 80a2650:	2201      	movpl	r2, #1
 80a2652:	601a      	strpl	r2, [r3, #0]
 80a2654:	4b18      	ldr	r3, [pc, #96]	; (80a26b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2656:	681a      	ldr	r2, [r3, #0]
 80a2658:	07d0      	lsls	r0, r2, #31
 80a265a:	bf5c      	itt	pl
 80a265c:	2201      	movpl	r2, #1
 80a265e:	601a      	strpl	r2, [r3, #0]
 80a2660:	4b16      	ldr	r3, [pc, #88]	; (80a26bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2662:	681a      	ldr	r2, [r3, #0]
 80a2664:	07d1      	lsls	r1, r2, #31
 80a2666:	bf5c      	itt	pl
 80a2668:	2201      	movpl	r2, #1
 80a266a:	601a      	strpl	r2, [r3, #0]
 80a266c:	4b14      	ldr	r3, [pc, #80]	; (80a26c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a266e:	681a      	ldr	r2, [r3, #0]
 80a2670:	07d2      	lsls	r2, r2, #31
 80a2672:	bf5c      	itt	pl
 80a2674:	2201      	movpl	r2, #1
 80a2676:	601a      	strpl	r2, [r3, #0]
 80a2678:	4b12      	ldr	r3, [pc, #72]	; (80a26c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a267a:	681a      	ldr	r2, [r3, #0]
 80a267c:	07d0      	lsls	r0, r2, #31
 80a267e:	bf5c      	itt	pl
 80a2680:	2201      	movpl	r2, #1
 80a2682:	601a      	strpl	r2, [r3, #0]
 80a2684:	4b10      	ldr	r3, [pc, #64]	; (80a26c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2686:	681a      	ldr	r2, [r3, #0]
 80a2688:	07d1      	lsls	r1, r2, #31
 80a268a:	bf5c      	itt	pl
 80a268c:	2201      	movpl	r2, #1
 80a268e:	601a      	strpl	r2, [r3, #0]
 80a2690:	4b0e      	ldr	r3, [pc, #56]	; (80a26cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2692:	681a      	ldr	r2, [r3, #0]
 80a2694:	07d2      	lsls	r2, r2, #31
 80a2696:	bf5c      	itt	pl
 80a2698:	2201      	movpl	r2, #1
 80a269a:	601a      	strpl	r2, [r3, #0]
 80a269c:	4770      	bx	lr
 80a269e:	bf00      	nop
 80a26a0:	200006dc 	.word	0x200006dc
 80a26a4:	200006d8 	.word	0x200006d8
 80a26a8:	200006d4 	.word	0x200006d4
 80a26ac:	200006d0 	.word	0x200006d0
 80a26b0:	200006cc 	.word	0x200006cc
 80a26b4:	200006c8 	.word	0x200006c8
 80a26b8:	200006c4 	.word	0x200006c4
 80a26bc:	200006c0 	.word	0x200006c0
 80a26c0:	200006bc 	.word	0x200006bc
 80a26c4:	200006b8 	.word	0x200006b8
 80a26c8:	200006b4 	.word	0x200006b4
 80a26cc:	200006b0 	.word	0x200006b0

080a26d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a26d0:	4b18      	ldr	r3, [pc, #96]	; (80a2734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a26d2:	681a      	ldr	r2, [r3, #0]
 80a26d4:	07d1      	lsls	r1, r2, #31
 80a26d6:	bf5c      	itt	pl
 80a26d8:	2201      	movpl	r2, #1
 80a26da:	601a      	strpl	r2, [r3, #0]
 80a26dc:	4b16      	ldr	r3, [pc, #88]	; (80a2738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a26de:	681a      	ldr	r2, [r3, #0]
 80a26e0:	07d2      	lsls	r2, r2, #31
 80a26e2:	bf5c      	itt	pl
 80a26e4:	2201      	movpl	r2, #1
 80a26e6:	601a      	strpl	r2, [r3, #0]
 80a26e8:	4b14      	ldr	r3, [pc, #80]	; (80a273c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a26ea:	681a      	ldr	r2, [r3, #0]
 80a26ec:	07d0      	lsls	r0, r2, #31
 80a26ee:	bf5c      	itt	pl
 80a26f0:	2201      	movpl	r2, #1
 80a26f2:	601a      	strpl	r2, [r3, #0]
 80a26f4:	4b12      	ldr	r3, [pc, #72]	; (80a2740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a26f6:	681a      	ldr	r2, [r3, #0]
 80a26f8:	07d1      	lsls	r1, r2, #31
 80a26fa:	bf5c      	itt	pl
 80a26fc:	2201      	movpl	r2, #1
 80a26fe:	601a      	strpl	r2, [r3, #0]
 80a2700:	4b10      	ldr	r3, [pc, #64]	; (80a2744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2702:	681a      	ldr	r2, [r3, #0]
 80a2704:	07d2      	lsls	r2, r2, #31
 80a2706:	bf5c      	itt	pl
 80a2708:	2201      	movpl	r2, #1
 80a270a:	601a      	strpl	r2, [r3, #0]
 80a270c:	4b0e      	ldr	r3, [pc, #56]	; (80a2748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a270e:	681a      	ldr	r2, [r3, #0]
 80a2710:	07d0      	lsls	r0, r2, #31
 80a2712:	bf5c      	itt	pl
 80a2714:	2201      	movpl	r2, #1
 80a2716:	601a      	strpl	r2, [r3, #0]
 80a2718:	4b0c      	ldr	r3, [pc, #48]	; (80a274c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a271a:	681a      	ldr	r2, [r3, #0]
 80a271c:	07d1      	lsls	r1, r2, #31
 80a271e:	bf5c      	itt	pl
 80a2720:	2201      	movpl	r2, #1
 80a2722:	601a      	strpl	r2, [r3, #0]
 80a2724:	4b0a      	ldr	r3, [pc, #40]	; (80a2750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2726:	681a      	ldr	r2, [r3, #0]
 80a2728:	07d2      	lsls	r2, r2, #31
 80a272a:	bf5c      	itt	pl
 80a272c:	2201      	movpl	r2, #1
 80a272e:	601a      	strpl	r2, [r3, #0]
 80a2730:	4770      	bx	lr
 80a2732:	bf00      	nop
 80a2734:	200006fc 	.word	0x200006fc
 80a2738:	200006f8 	.word	0x200006f8
 80a273c:	200006f4 	.word	0x200006f4
 80a2740:	200006f0 	.word	0x200006f0
 80a2744:	200006ec 	.word	0x200006ec
 80a2748:	200006e8 	.word	0x200006e8
 80a274c:	200006e4 	.word	0x200006e4
 80a2750:	200006e0 	.word	0x200006e0

080a2754 <__cxa_atexit>:
 80a2754:	b510      	push	{r4, lr}
 80a2756:	4c05      	ldr	r4, [pc, #20]	; (80a276c <__cxa_atexit+0x18>)
 80a2758:	4613      	mov	r3, r2
 80a275a:	b12c      	cbz	r4, 80a2768 <__cxa_atexit+0x14>
 80a275c:	460a      	mov	r2, r1
 80a275e:	4601      	mov	r1, r0
 80a2760:	2002      	movs	r0, #2
 80a2762:	f3af 8000 	nop.w
 80a2766:	bd10      	pop	{r4, pc}
 80a2768:	4620      	mov	r0, r4
 80a276a:	bd10      	pop	{r4, pc}
 80a276c:	00000000 	.word	0x00000000

080a2770 <memcpy>:
 80a2770:	b510      	push	{r4, lr}
 80a2772:	1e43      	subs	r3, r0, #1
 80a2774:	440a      	add	r2, r1
 80a2776:	4291      	cmp	r1, r2
 80a2778:	d004      	beq.n	80a2784 <memcpy+0x14>
 80a277a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a277e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2782:	e7f8      	b.n	80a2776 <memcpy+0x6>
 80a2784:	bd10      	pop	{r4, pc}

080a2786 <memset>:
 80a2786:	4603      	mov	r3, r0
 80a2788:	4402      	add	r2, r0
 80a278a:	4293      	cmp	r3, r2
 80a278c:	d002      	beq.n	80a2794 <memset+0xe>
 80a278e:	f803 1b01 	strb.w	r1, [r3], #1
 80a2792:	e7fa      	b.n	80a278a <memset+0x4>
 80a2794:	4770      	bx	lr
	...

080a2798 <srand>:
 80a2798:	b538      	push	{r3, r4, r5, lr}
 80a279a:	4b12      	ldr	r3, [pc, #72]	; (80a27e4 <srand+0x4c>)
 80a279c:	4605      	mov	r5, r0
 80a279e:	681c      	ldr	r4, [r3, #0]
 80a27a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a27a2:	b9d3      	cbnz	r3, 80a27da <srand+0x42>
 80a27a4:	2018      	movs	r0, #24
 80a27a6:	f7fe fb51 	bl	80a0e4c <malloc>
 80a27aa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a27ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80a27b0:	8003      	strh	r3, [r0, #0]
 80a27b2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a27b6:	8043      	strh	r3, [r0, #2]
 80a27b8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a27bc:	8083      	strh	r3, [r0, #4]
 80a27be:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a27c2:	80c3      	strh	r3, [r0, #6]
 80a27c4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a27c8:	8103      	strh	r3, [r0, #8]
 80a27ca:	2305      	movs	r3, #5
 80a27cc:	8143      	strh	r3, [r0, #10]
 80a27ce:	230b      	movs	r3, #11
 80a27d0:	8183      	strh	r3, [r0, #12]
 80a27d2:	2201      	movs	r2, #1
 80a27d4:	2300      	movs	r3, #0
 80a27d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a27da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a27dc:	2200      	movs	r2, #0
 80a27de:	611d      	str	r5, [r3, #16]
 80a27e0:	615a      	str	r2, [r3, #20]
 80a27e2:	bd38      	pop	{r3, r4, r5, pc}
 80a27e4:	200000bc 	.word	0x200000bc

080a27e8 <strcat>:
 80a27e8:	4602      	mov	r2, r0
 80a27ea:	b510      	push	{r4, lr}
 80a27ec:	4613      	mov	r3, r2
 80a27ee:	781c      	ldrb	r4, [r3, #0]
 80a27f0:	3201      	adds	r2, #1
 80a27f2:	2c00      	cmp	r4, #0
 80a27f4:	d1fa      	bne.n	80a27ec <strcat+0x4>
 80a27f6:	3b01      	subs	r3, #1
 80a27f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a27fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a2800:	2a00      	cmp	r2, #0
 80a2802:	d1f9      	bne.n	80a27f8 <strcat+0x10>
 80a2804:	bd10      	pop	{r4, pc}
	...

080a2808 <strdup>:
 80a2808:	4b02      	ldr	r3, [pc, #8]	; (80a2814 <strdup+0xc>)
 80a280a:	4601      	mov	r1, r0
 80a280c:	6818      	ldr	r0, [r3, #0]
 80a280e:	f000 b803 	b.w	80a2818 <_strdup_r>
 80a2812:	bf00      	nop
 80a2814:	200000bc 	.word	0x200000bc

080a2818 <_strdup_r>:
 80a2818:	b570      	push	{r4, r5, r6, lr}
 80a281a:	4606      	mov	r6, r0
 80a281c:	4608      	mov	r0, r1
 80a281e:	460c      	mov	r4, r1
 80a2820:	f000 f80d 	bl	80a283e <strlen>
 80a2824:	1c45      	adds	r5, r0, #1
 80a2826:	4629      	mov	r1, r5
 80a2828:	4630      	mov	r0, r6
 80a282a:	f7fe fb2f 	bl	80a0e8c <_malloc_r>
 80a282e:	4606      	mov	r6, r0
 80a2830:	b118      	cbz	r0, 80a283a <_strdup_r+0x22>
 80a2832:	462a      	mov	r2, r5
 80a2834:	4621      	mov	r1, r4
 80a2836:	f7ff ff9b 	bl	80a2770 <memcpy>
 80a283a:	4630      	mov	r0, r6
 80a283c:	bd70      	pop	{r4, r5, r6, pc}

080a283e <strlen>:
 80a283e:	4603      	mov	r3, r0
 80a2840:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2844:	2a00      	cmp	r2, #0
 80a2846:	d1fb      	bne.n	80a2840 <strlen+0x2>
 80a2848:	1a18      	subs	r0, r3, r0
 80a284a:	3801      	subs	r0, #1
 80a284c:	4770      	bx	lr

080a284e <strncpy>:
 80a284e:	4603      	mov	r3, r0
 80a2850:	b510      	push	{r4, lr}
 80a2852:	b142      	cbz	r2, 80a2866 <strncpy+0x18>
 80a2854:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2858:	3a01      	subs	r2, #1
 80a285a:	f803 4b01 	strb.w	r4, [r3], #1
 80a285e:	2c00      	cmp	r4, #0
 80a2860:	d1f7      	bne.n	80a2852 <strncpy+0x4>
 80a2862:	441a      	add	r2, r3
 80a2864:	e000      	b.n	80a2868 <strncpy+0x1a>
 80a2866:	bd10      	pop	{r4, pc}
 80a2868:	4293      	cmp	r3, r2
 80a286a:	d002      	beq.n	80a2872 <strncpy+0x24>
 80a286c:	f803 4b01 	strb.w	r4, [r3], #1
 80a2870:	e7fa      	b.n	80a2868 <strncpy+0x1a>
 80a2872:	bd10      	pop	{r4, pc}

080a2874 <dynalib_user>:
 80a2874:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2884:	0000 0000 6170 7472 6369 656c 642f 7665     ....particle/dev
 80a2894:	6369 2f65 616e 656d 4d00 5079 6f68 6f74     ice/name.MyPhoto
 80a28a4:	006e 3032 2e37 3532 2e33 3831 2e35 3535     n.207.253.185.55
 80a28b4:	0000 4d04 5451 0454 0600 514d 7349 7064     ...MQTT...MQIsdp
 80a28c4:	0003 0000                                   ....

080a28c8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a28d0:	0f59 080a 0f5f 080a 1377 080a 0f6d 080a     Y..._...w...m...
 80a28e0:	0f5b 080a                                   [...

080a28e4 <_ZTV9TCPClient>:
	...
 80a28ec:	0265 080a 0299 080a 0f15 080a 0f2f 080a     e.........../...
 80a28fc:	1075 080a 0fdf 080a 0fb1 080a 0f57 080a     u...........W...
 80a290c:	1121 080a 1391 080a 1013 080a 10ed 080a     !...............
 80a291c:	126f 080a 12c1 080a 0f3f 080a 1233 080a     o.......?...3...
 80a292c:	0f91 080a 6977 6972 676e 5400 5043 6c43     ....wiring.TCPCl
 80a293c:	6569 746e 7320 636f 656b 3d74 7825 6200     ient socket=%x.b
 80a294c:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a295c:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a296c:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a297c:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a298c:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a299c:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a29ac:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a29bc:	6c64 7265 6100 7070 2500 3130 7530 0020     dler.app.%010u .
 80a29cc:	205d 2500 0064 202c 2800 3a29 0020 5b20     ] .%d., .(): . [
 80a29dc:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
 80a29ec:	6c69 2073 203d 0d00 000a 0066 6e6c 6600     ils = ....f.ln.f
 80a29fc:	006e 6f63 6564 6400 7465 6961 006c 6f6e     n.code.detail.no
 80a2a0c:	656e 7400 6172 6563 6900 666e 006f 6177     ne.trace.info.wa
 80a2a1c:	6e72 6500 7272 726f 7000 6e61 6369 6100     rn.error.panic.a
 80a2a2c:	6c6c 5a00 2500 302b 6433 253a 3230 0075     ll.Z.%+03d:%02u.
 80a2a3c:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a2a4c:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

080a2a58 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2a60:	1765 080a 176b 080a 17af 080a 1779 080a     e...k.......y...
 80a2a70:	1767 080a                                   g...

080a2a74 <_ZTV9IPAddress>:
	...
 80a2a7c:	1cfd 080a 1ced 080a 1cef 080a               ............

080a2a88 <_ZTV9USBSerial>:
	...
 80a2a90:	1de5 080a 1e35 080a 1e43 080a 14d3 080a     ....5...C.......
 80a2aa0:	1e21 080a 1de7 080a 1dfd 080a 1e2f 080a     !.........../...
 80a2ab0:	1e13 080a 1de1 080a                         ........

080a2ab8 <_ZTV11USARTSerial>:
	...
 80a2ac0:	1f7d 080a 1fcd 080a 1fdb 080a 14d3 080a     }...............
 80a2ad0:	1f91 080a 1fb3 080a 1f9f 080a 1fc7 080a     ................
 80a2ae0:	1f7f 080a 1f83 080a                         ........

080a2ae8 <_ZTV7TwoWire>:
	...
 80a2af0:	20a9 080a 20f3 080a 20cb 080a 20ab 080a     . ... ... ... ..
 80a2b00:	20d3 080a 20db 080a 20e3 080a 20eb 080a     . ... ... ... ..

080a2b10 <_ZTVN5spark9WiFiClassE>:
	...
 80a2b18:	21c3 080a 21b9 080a 21af 080a 212d 080a     .!...!...!..-!..
 80a2b28:	1563 080a 21a3 080a 2197 080a 218f 080a     c....!...!...!..
 80a2b38:	2185 080a 217b 080a 2137 080a               .!..{!..7!..

080a2b44 <_ZTVN5spark12NetworkClassE>:
	...
 80a2b4c:	21e1 080a 21eb 080a 21f5 080a 21ff 080a     .!...!...!...!..
 80a2b5c:	2209 080a 2215 080a 2221 080a 222d 080a     ."..."..!"..-"..
 80a2b6c:	2235 080a 223f 080a 2249 080a               5"..?"..I"..

080a2b78 <_ZSt7nothrow>:
 80a2b78:	0000 0000                                   ....

080a2b7c <__sf_fake_stdin>:
	...

080a2b9c <__sf_fake_stdout>:
	...

080a2bbc <__sf_fake_stderr>:
	...
 80a2bdc:	0043                                        C.

080a2bde <link_const_variable_data_end>:
	...

080a2be0 <link_constructors_location>:
 80a2be0:	080a0221 	.word	0x080a0221
 80a2be4:	080a0a4b 	.word	0x080a0a4b
 80a2be8:	080a0ee1 	.word	0x080a0ee1
 80a2bec:	080a15a9 	.word	0x080a15a9
 80a2bf0:	080a15b9 	.word	0x080a15b9
 80a2bf4:	080a1611 	.word	0x080a1611
 80a2bf8:	080a21cd 	.word	0x080a21cd
 80a2bfc:	080a22b1 	.word	0x080a22b1
 80a2c00:	080a23cd 	.word	0x080a23cd
 80a2c04:	080a24c5 	.word	0x080a24c5
 80a2c08:	080a2549 	.word	0x080a2549
 80a2c0c:	080a260d 	.word	0x080a260d
 80a2c10:	080a26d1 	.word	0x080a26d1

080a2c14 <link_constructors_end>:
	...
